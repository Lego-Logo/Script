-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á UI -----------------------------------------------------

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Fluent UI ‡πÅ‡∏•‡∏∞ Addons
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()


-- ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Fluent
local Window = Fluent:CreateWindow({
    Title = "ZSOFT HUB",
    SubTitle = "SpongeBob Tower Defense",
    TabWidth = 160,
    Size = UDim2.fromOffset(520, 400),
    Acrylic = false,
    Theme = "Aqua",
    MinimizeKey = Enum.KeyCode.LeftControl
})


local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "box" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
}

-- ‚úÖ UI Components (Toggle / Slider / Input / Dropdown / Keybind)
Tabs.Main:AddToggle("TestToggle", {
    Title = "üü¢ Auto Test Toggle",
    Default = false,
    Callback = function(state)
        print("Toggle State:", state)
    end
})

Tabs.Main:AddSlider("TestSlider", {
    Title = "üéöÔ∏è Test Slider",
    Description = "Slider for test",
    Default = 50,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Callback = function(value)
        print("Slider Value:", value)
    end
})

Tabs.Main:AddInput("TestInput", {
    Title = "‚å®Ô∏è Test Input",
    Placeholder = "Enter something...",
    Numeric = false,
    Callback = function(text)
        print("Input Text:", text)
    end
})

Tabs.Main:AddDropdown("TestDropdown", {
    Title = "üìã Test Dropdown",
    Values = { "One", "Two", "Three" },
    Multi = false,
    Default = "One",
    Callback = function(val)
        print("Dropdown:", val)
    end
})

Tabs.Main:AddKeybind("TestKey", {
    Title = "üß∑ Test Keybind",
    Mode = "Toggle",
    Default = Enum.KeyCode.F,
    Callback = function()
        print("Keybind F Pressed")
    end
})

Tabs.Settings:AddParagraph({
    Title = "Settings",
    Content = "‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Config, Theme ‡∏Ø‡∏•‡∏Ø"
})

-- ‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Fluent Library ‡πÉ‡∏´‡πâ SaveManager/InterfaceManager
local successCfg = pcall(function()
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    SaveManager:IgnoreThemeSettings()
    SaveManager:SetFolder("ZSOFT HUB - TEST")
    InterfaceManager:SetFolder("ZSOFT HUB - TEST")

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)
end)

if successCfg then
    print("‚úÖ [Settings] ‡πÇ‡∏´‡∏•‡∏î SaveManager/InterfaceManager ‡πÄ‡∏™‡∏£‡πá‡∏à")
else
    warn("‚ö†Ô∏è [Settings] ‡πÇ‡∏´‡∏•‡∏î Config UI ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
end

-- ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö Macro ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
Window:SelectTab(1)
print("‚úÖ [Fix] ‡πÄ‡∏õ‡∏¥‡∏î Tab Macro ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

-- ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
Fluent:Notify({
    Title = "ZSOFT HUB",
    Content = "SpongeBob Macro UI ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß üéâ",
    Duration = 5
})



---- AUTO SAVE / AUTO LOAD CONFIG --------------------------------
local playerName = game.Players.LocalPlayer.Name
local folder = "ZSOFT HUB - TEST"
local autoloadPath = folder .. "/settings/autoload.txt"

-- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
SaveManager:SetFolder(folder)
InterfaceManager:SetFolder(folder)
SaveManager.ConfigName = playerName

-- ‚úÖ ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ UI
if SaveManager.Options and SaveManager.Options.ConfigName and SaveManager.Options.ConfigName.Textbox then
    SaveManager.Options.ConfigName.Textbox.Text = playerName
end

-- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ autoload.txt ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
local shouldLoad = false
local ok, autoloadName = pcall(readfile, autoloadPath)
if ok and autoloadName == playerName then
    shouldLoad = true
end

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ pcall ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô error
if shouldLoad then
    local success, err = pcall(function()
        SaveManager:Load(playerName)
    end)
    if success then
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        print("‚úÖ Autoload matched:", autoloadName)
    else
        warn("‚ö†Ô∏è Load error (autoload matched):", err)
    end
else
    -- ‚ùå ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô autoload ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î config ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    pcall(function()
        writefile(autoloadPath, playerName)
        print("‚ö†Ô∏è Autoload mismatch ‚Üí overwrite:", autoloadName, "‚Üí", playerName)
    end)

    local success, err = pcall(function()
        SaveManager:Load(playerName)
    end)
    if success then
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        print("‚úÖ Loaded default config for:", playerName)
    else
        warn("‚ö†Ô∏è Load error (new user):", err)
    end
end

-- ‚úÖ ‡∏ú‡∏π‡∏Å AutoSave ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å flag ‡πÉ‡∏ô Fluent
for flagName, flagData in pairs(Fluent.Flags or {}) do
    if typeof(flagData) == "table" and typeof(flagData.Changed) == "function" then
        flagData.Changed:Connect(function()
            SaveManager:Save(playerName)
            --print("üíæ AutoSaved from:", flagName)
        end)
    end
end

-- ‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥
task.spawn(function()
    while true do
        task.wait(30)
        SaveManager:Save(playerName)
        --print("üïí AutoSaved every 30s for", playerName)
    end
end)
---- END AUTO SAVE / AUTO LOAD CONFIG --------------------------------
