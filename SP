-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á UI -----------------------------------------------------

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Fluent UI ‡πÅ‡∏•‡∏∞ Addons
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Lego-Logo/Script/refs/heads/main/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()


-- ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Fluent
local Window = Fluent:CreateWindow({
    Title = "ZSOFT HUB",
    SubTitle = "SpongeBob Tower Defense",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 430),
    Acrylic = false,
    Theme = "Aqua",
    MinimizeKey = Enum.KeyCode.LeftControl
})


-- ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Tabs ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
local Tabs = {
    AutoJoin = Window:AddTab({ Title = "AutoJoin", Icon = "log-in" }),
    Macro = Window:AddTab({ Title = "Macro", Icon = "clock" }),
    Game = Window:AddTab({ Title = "Game", Icon = "gamepad-2" }),
    Misc = Window:AddTab({ Title = "Miscellaneous", Icon = "package" }),
    Item = Window:AddTab({ Title = "Item", Icon = "shopping-cart" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}


-- END ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á UI -----------------------------------------------------


-- ‡∏õ‡∏¥‡∏î Notify ‡∏ñ‡∏≤‡∏ß‡∏£
Fluent.Notify = function() end


-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£ -----------------------------------------------------
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")


-- ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Macro
local macroFileName = "Unnamed-Macro"
local selectedFile = nil
local isRecording = false
local isPlacingFromMacro = false
local macroData = {}
local index = 1

-- ‡πÇ‡∏´‡∏•‡∏î Remote ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï
local placeTower = ReplicatedStorage:WaitForChild("Packages")
    :WaitForChild("_Index"):WaitForChild("acecateer_knit@1.7.1")
    :WaitForChild("knit"):WaitForChild("Services")
    :WaitForChild("TowerService"):WaitForChild("RF")
    :WaitForChild("PlaceTower")


-- üîÅ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Toggle Replay (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å Toggle)
local isReplayEnabled = false

-- üîó RemoteFunction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Replay
local endGameVoteRemote = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("_Index")
    :WaitForChild("acecateer_knit@1.7.1")
    :WaitForChild("knit")
    :WaitForChild("Services")
    :WaitForChild("GameService")
    :WaitForChild("RF")
    :WaitForChild("EndGameVote")

-- üîó RemoteFunction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VoteStart
local voteRemote = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("_Index")
    :WaitForChild("acecateer_knit@1.7.1")
    :WaitForChild("knit")
    :WaitForChild("Services")
    :WaitForChild("GameService")
    :WaitForChild("RF")
    :WaitForChild("VoteStartRound")

-- END ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£ -----------------------------------------------------






-- TABS: Auto Join -----------------------------------------------------

local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- üîí STATE (‡πÅ‡∏ó‡∏ô _G)
Tabs.AutoJoin.State = {
    AutoStartEnabled = false,
    AutoStartDelay = 5,
    AutoJoinEnabled = false,
    SelectedStoryMap = "Conch Street",
    SelectedStoryAct = 1,
    SelectedStoryMode = "Normal",
    IsJoiningRoom = false
}

-- üìå ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
local storyMaps = {
    "Conch Street",
    "Jellyfish Fields",
    "Krusty Krab",
    "Chum Bucket",
    "Sandy's Treedome",
    "Rock Bottom"
}
local difficultyModes = { "Normal", "Hard", "Nightmare" }

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à Lobby
local function isInLobby()
    return Workspace:FindFirstChild("LobbyMenuZones") ~= nil
end

-- ‚úÖ SECTION: AUTO START
Tabs.AutoJoin:AddSection("Auto Start")

Tabs.AutoJoin:AddToggle("AutoStartToggle", {
    Title = "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto Start",
    Description = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á",
    Default = false,
    Callback = function(state)
        Tabs.AutoJoin.State.AutoStartEnabled = state

        -- ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏£‡∏≠ Start ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î AutoStart ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏° countdown ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏¢‡∏¥‡∏á
        if state and Tabs.AutoJoin.State._WaitingForStart and Tabs.AutoJoin.State._PendingReplicaId then
            local delayTime = Tabs.AutoJoin.State.AutoStartDelay or 5
            local replicaId = Tabs.AutoJoin.State._PendingReplicaId

            task.spawn(function()
                --print("‚è±Ô∏è [AutoStart] ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á ‚Üí ‡∏£‡∏≠ " .. delayTime .. " ‡∏ß‡∏¥ ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á")
                task.wait(delayTime)

                if Tabs.AutoJoin.State.AutoStartEnabled and isInLobby() then
                    ReplicatedStorage.ReplicaRemoteEvents.Replica_ReplicaSignal:FireServer(replicaId, "StartGame")
                    --print("üöÄ [AutoStart] ‡∏¢‡∏¥‡∏á StartGame ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á delay")
                else
                    --print("‚ùå [AutoStart] ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πá‡∏≠‡∏ö‡∏ö‡∏µ‡πâ‡∏´‡∏≤‡∏¢")
                end

                Tabs.AutoJoin.State._WaitingForStart = false
                Tabs.AutoJoin.State._PendingReplicaId = nil
            end)
        end
    end
})



Tabs.AutoJoin:AddSlider("StartDelay", {
    Title = "‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°",
    Description = "‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á Auto Join ‡πÅ‡∏•‡∏∞ Auto Start",
    Min = 1,
    Max = 60,
    Default = 5,
    Rounding = 0,
    Callback = function(value)
        Tabs.AutoJoin.State.AutoStartDelay = value
    end
})

-- ‚úÖ SECTION: STORY MODE
Tabs.AutoJoin:AddSection("Story Mode / Endless")

Tabs.AutoJoin:AddDropdown("SelectPlayMode", {
    Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô",
    Description = "Story / Endless",
    Values = { "Story", "Endless" },
    Default = "Story",
    Callback = function(value)
        Tabs.AutoJoin.State.SelectedPlayMode = value
        updateActDropdown() -- ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Act ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
    end
})

Tabs.AutoJoin:AddDropdown("SelectStoryMap", {
    Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô",
    Description = "‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô Story / Endless Mode",
    Values = storyMaps,
    Default = storyMaps[1],
    Callback = function(value)
        Tabs.AutoJoin.State.SelectedStoryMap = value
    end
})

Options = Options or {}
Options.SelectStoryAct = Tabs.AutoJoin:AddDropdown("SelectStoryAct", {
    Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Act ‡∏´‡∏£‡∏∑‡∏≠ Endless",
    Description = "Act 1 ‚àû A / B ‚àû Act 2",
    Values = {}, -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
    Default = "1",
    Callback = function(value)
        Tabs.AutoJoin.State.SelectedStoryAct = value
    end
})

-- ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Act ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
function updateActDropdown()
    local mode = Tabs.AutoJoin.State.SelectedPlayMode or "Story"
    local acts = {}

    if mode == "Story" then
        for i = 1, 10 do table.insert(acts, tostring(i)) end
    elseif mode == "Endless" then
        acts = { "Act1", "Act2" }
    end

    Options.SelectStoryAct:SetValues(acts)
    Options.SelectStoryAct:SetValue(acts[1])
    Tabs.AutoJoin.State.SelectedStoryAct = acts[1]
end


-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
updateActDropdown()

Tabs.AutoJoin:AddDropdown("SelectStoryMode", {
    Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å",
    Description = "Normal / Hard / Nightmare",
    Values = difficultyModes,
    Default = "Normal",
    Callback = function(value)
        Tabs.AutoJoin.State.SelectedStoryMode = value
    end
})

-- ‚úÖ SECTION: AUTO JOIN + AutoStart ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏î‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
Tabs.AutoJoin:AddToggle("EnableAutoJoin", {
    Title = "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto Join",
    Description = "‡∏à‡∏∞‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
    Default = false,
    Callback = function(state)
        Tabs.AutoJoin.State.AutoJoinEnabled = state

        if state and not Tabs.AutoJoin.State.IsJoiningRoom then
            task.spawn(function()
                if not isInLobby() then
                    warn("‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Lobby ‚Üí ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á")
                    return
                end

                Tabs.AutoJoin.State.IsJoiningRoom = true

                local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                local hrp = char:WaitForChild("HumanoidRootPart")
                hrp.CFrame = CFrame.new(Vector3.new(117, 10, -529))
                
                RunService.Heartbeat:Wait()

                local selectedMap = (Tabs.AutoJoin.State.SelectedStoryMap or ""):gsub("%s+", "")
                local act = Tabs.AutoJoin.State.SelectedStoryAct or "1"
                local selectedMode = Tabs.AutoJoin.State.SelectedStoryMode or "Normal"
                local mode = Tabs.AutoJoin.State.SelectedPlayMode or "Story"
                local difficultyMap = { Normal = 1, Hard = 2, Nightmare = 3 }
                local selectedDifficulty = difficultyMap[selectedMode] or 1
                local delayTime = Tabs.AutoJoin.State.AutoStartDelay or 5

                local chapter = 1
                if mode == "Story" then
                    chapter = tonumber(act) or 1
                elseif mode == "Endless" then
                    local actClean = tostring(act):gsub("%s+", "")
                    chapter = (actClean == "Act2") and 2 or 1
                end

                -- ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠ AutoStart ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ
                local function handleStartGame(replicaId)
                    Tabs.AutoJoin.State._PendingReplicaId = replicaId
                    Tabs.AutoJoin.State._WaitingForStart = true

                    task.spawn(function()
                        --print("‚è±Ô∏è ‡∏£‡∏≠ " .. delayTime .. " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞ StartGame...")
                        task.wait(delayTime)

                        if Tabs.AutoJoin.State.AutoStartEnabled and isInLobby() then
                            ReplicatedStorage.ReplicaRemoteEvents.Replica_ReplicaSignal:FireServer(replicaId, "StartGame")
                            --print("üöÄ StartGame ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        end

                        Tabs.AutoJoin.State._WaitingForStart = false
                        Tabs.AutoJoin.State._PendingReplicaId = nil
                    end)
                end

                local connection
                connection = ReplicatedStorage.ReplicaRemoteEvents.Replica_ReplicaCreate.OnClientEvent:Connect(function(replicaId, data)
                    connection:Disconnect()

                    ReplicatedStorage.ReplicaRemoteEvents.Replica_ReplicaSignal:FireServer(replicaId, "ConfirmMap", {
                        Difficulty = selectedDifficulty,
                        Chapter = chapter,
                        Endless = (mode == "Endless"),
                        World = selectedMap
                    })

                    handleStartGame(replicaId)
                    Tabs.AutoJoin.State.IsJoiningRoom = false
                end)

                if isInLobby() then
                    ReplicatedStorage.ReplicaRemoteEvents.Replica_ReplicaSignal:FireServer(nil, "ConfirmMap", {
                        Difficulty = selectedDifficulty,
                        Chapter = chapter,
                        Endless = (mode == "Endless"),
                        World = selectedMap
                    })
                else
                    Tabs.AutoJoin.State.IsJoiningRoom = false
                end
            end)
        end
    end
})


-- Auto Join Challenge
Tabs.AutoJoin:AddSection("Challenge Mode")

-- ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
Tabs.AutoJoin.State.SelectedChallengeMode = "Nightmare"

-- ‚úÖ Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
Tabs.AutoJoin:AddDropdown("SelectChallengeMode", {
    Title = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å Challenge",
    Description = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å",
    Values = { "Hard", "Nightmare" },
    Default = "Nightmare",
    Callback = function(value)
        Tabs.AutoJoin.State.SelectedChallengeMode = value
    end
})


-- ‚úÖ Toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î
Tabs.AutoJoin:AddToggle("EnableChallengeAutoJoin", {
    Title = "Auto Join (Challenge Mode)",
    Description = "‡∏à‡∏∞‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
    Default = false,
    Callback = function(state)
        if not state then return end

        task.spawn(function()
            if not isInLobby() then
                Fluent:Notify({
                    Title = "‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Lobby",
                    Content = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Challenge ‡πÑ‡∏î‡πâ",
                    Duration = 3
                })
                return
            end

            -- ‚úÖ ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
            local difficulty = Tabs.AutoJoin.State.SelectedChallengeMode or "Hard"
            local pos = Vector3.new()

            if difficulty == "Nightmare" then
                pos = Vector3.new(355.2195129394531, 13.200729370117188, -421.3446960449219)
            else
                pos = Vector3.new(332.8740234375, 12.735966682434082, -361.625)
            end


            local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(pos)

            Fluent:Notify({
                Title = "üöÄ Challenge Mode",
                Content = "‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏°‡∏î " .. difficulty,
                Duration = 3
            })
        end)
    end
})

-- Auto Join Challenge
Tabs.AutoJoin:AddSection("Raid Mode")

-- ‚úÖ Raid Mode - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
Tabs.AutoJoin.State.SelectedRaidStage = "Mermalair"
Tabs.AutoJoin.State.SelectedRaidMode = "Nightmare"

-- ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πà‡∏≤‡∏ô
local raidStages = {
    "Mermalair",
    "Middle Ages"
}

-- ‚úÖ Dropdown: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô Raid
Tabs.AutoJoin:AddDropdown("SelectRaidStage", {
    Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô Raid",
    Description = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô",
    Values = raidStages,
    Default = "Mermalair",
    Callback = function(val)
        Tabs.AutoJoin.State.SelectedRaidStage = val
    end
})

-- ‚úÖ Dropdown: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
Tabs.AutoJoin:AddDropdown("SelectRaidMode", {
    Title = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å Raid",
    Description = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô",
    Values = { "Hard", "Nightmare" },
    Default = "Nightmare",
    Callback = function(val)
        Tabs.AutoJoin.State.SelectedRaidMode = val
    end
})

Tabs.AutoJoin:AddToggle("EnableRaidAutoJoin", {
    Title = "Auto Join (Raid Mode)",
    Description = "‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏î‡πà‡∏≤‡∏ô Raid ‡∏ï‡∏≤‡∏°‡∏î‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
    Default = false,
    Callback = function(state)
        if not state then return end

        task.spawn(function()
            if not isInLobby() then
                Fluent:Notify({
                    Title = "‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Lobby",
                    Content = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤ Raid Mode ‡πÑ‡∏î‡πâ",
                    Duration = 3
                })
                return
            end

            local stage = Tabs.AutoJoin.State.SelectedRaidStage
            local difficulty = Tabs.AutoJoin.State.SelectedRaidMode or "Hard"

            -- ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏î‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
            local posMap = {
                ["Mermalair"] = {
                    Hard = Vector3.new(42.56332778930664, 5, -365.46478271484375),
                    Nightmare = Vector3.new(-10.510272026062012, 5, -368.5558166503906)
                },
                ["Middle Ages"] = {
                    Hard = Vector3.new(41.95417404174805, 5, -455.2958984375),
                    Nightmare = Vector3.new(-11.096419334411621, 5, -452.27069091796875)
                }
            }


            local pos = posMap[stage] and posMap[stage][difficulty]

            if pos then
                local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                local hrp = char:WaitForChild("HumanoidRootPart")
                hrp.CFrame = CFrame.new(pos)

                Fluent:Notify({
                    Title = "üöÄ Raid Mode",
                    Content = string.format("‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á %s (%s)", stage, difficulty),
                    Duration = 3
                })
            else
                Fluent:Notify({
                    Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î",
                    Content = "‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Stage ‡∏ô‡∏µ‡πâ",
                    Duration = 4
                })
            end
        end)
    end
})




-- END TABS: Auto Join -----------------------------------------------------












-- TABS:Macro -----------------------------------------------------

-- ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å GameCurrency.Coins.Title
local function getCurrentYen()
    local label = LocalPlayer.PlayerGui.HUD.Bottom:FindFirstChild("GameCurrency")
        and LocalPlayer.PlayerGui.HUD.Bottom.GameCurrency:FindFirstChild("Coins")
        and LocalPlayer.PlayerGui.HUD.Bottom.GameCurrency.Coins:FindFirstChild("Title")

    if label and label:IsA("TextLabel") then
        local raw = label.Text or "0"
        return tonumber((raw:gsub(",", ""))) or 0
    end

    return 0
end

local function getUnitPrice(unitID)
    local hotbar = LocalPlayer.PlayerGui.HUD.Bottom.Hotbar
    local slot = hotbar:FindFirstChild(tostring(unitID))

    if slot and slot:FindFirstChild("Content") then
        local label = slot.Content:FindFirstChild("TowerInfo")
            and slot.Content.TowerInfo:FindFirstChild("Cost")
            and slot.Content.TowerInfo.Cost:FindFirstChild("Amount")

        if label and label:IsA("TextLabel") then
            local raw = label.Text or "0"
            return tonumber((raw:gsub(",", ""))) or 0
        end
    end

    return 0
end


-- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Macro ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
local macroFolderPath = "ZSOFT HUB - SpongeBobTD/Marco"
if not isfolder(macroFolderPath) then
    makefolder(macroFolderPath)
    --print("üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Macro ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:", macroFolderPath)
else
    --print("‚úÖ ‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Macro ‡πÅ‡∏•‡πâ‡∏ß:", macroFolderPath)
end


-- ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Input: ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Macro
Tabs.Macro:AddInput("MacroFileName", {
    Title = "üìÅ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Macro ‡πÉ‡∏´‡∏°‡πà",
    Default = "MyMacro",
    Placeholder = "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå",
    Callback = function(val)
        macroFileName = val ~= "" and val or "Unnamed-Macro"
    end
})


Tabs.Macro:AddButton({
    Title = "‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Macro",
    Description = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡πÄ‡∏õ‡∏•‡πà‡∏≤",
    Callback = function()
        -- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Unknown ‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
        local mapName = "Unknown"

        -- ‚úÖ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Map ‡∏à‡∏≤‡∏Å WorldTitle ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        local success, result = pcall(function()
            local gui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
            if not gui then return end

            local title = gui:FindFirstChild("GameUI")
                and gui.GameUI:FindFirstChild("Top")
                and gui.GameUI.Top:FindFirstChild("Main")
                and gui.GameUI.Top.Main:FindFirstChild("StageInfo")
                and gui.GameUI.Top.Main.StageInfo:FindFirstChild("Inner")
                and gui.GameUI.Top.Main.StageInfo.Inner:FindFirstChild("Inner")
                and gui.GameUI.Top.Main.StageInfo.Inner.Inner:FindFirstChild("WorldTitle")

            if title and title:IsA("TextLabel") then
                mapName = title.Text or "Unknown"
            end
        end)

        if not success then
            warn("‚ùå ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Map ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result)
        end

        -- ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á
        local fileName = (macroFileName ~= nil and macroFileName ~= "") and macroFileName or "Unnamed-Macro"

        -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        local folderPath = "ZSOFT HUB - SpongeBobTD/Marco"
        if not isfolder(folderPath) then
            makefolder(folderPath)
        end

        -- ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        local fullData = {
            Map = mapName,
            Marco_Data = {},
            Version = 1,
            Index = 0
        }

        -- ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        local path = folderPath .. "/" .. fileName .. ".json"
        writefile(path, HttpService:JSONEncode(fullData))

        -- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ dropdown ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        refreshMacroDropdown()
        Fluent:Notify({
            Title = "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Macro",
            Content = fileName .. ".json (" .. mapName .. ") ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß",
            Duration = 4
        })
    end
})




local macroDropdown = nil
local function getAvailableMacroFiles()
    local folder = "ZSOFT HUB - SpongeBobTD/Marco"
    if isfolder(folder) then return listfiles(folder) end
    return {}
end

local function refreshMacroDropdown()
    local files = getAvailableMacroFiles()
    local names = {}
    for _, path in ipairs(files) do
        local name = string.match(path, "([^/\\]+)%.json$")
        if name then table.insert(names, name) end
    end
    if macroDropdown then
        macroDropdown:SetValues(names)
    end
end

macroDropdown = Tabs.Macro:AddDropdown("SelectMacroFile", {
    Title = "üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Macro",
    Description = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Macro ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ",
    Values = {},
    Multi = false,
    Default = nil
})

-- üîÅ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£
refreshMacroDropdown()

macroDropdown:OnChanged(function(value)
    selectedFile = value
end)






Tabs.Macro:AddButton({
    Title = "üîÅ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå",
    Description = "‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö",
    Callback = function()
        refreshMacroDropdown()

        -- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î ZSOFT HUB - Setting
        task.delay(0.2, function()
            local selected = macroDropdown and macroDropdown:GetValue()
            if selected and selected ~= "" then
                selectedFile = selected
            end
        end)


        Fluent:Notify({ Title = "üîÅ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏•‡πâ‡∏ß", Content = "‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", Duration = 3 })
    end
})

Tabs.Macro:AddToggle("RecordToggle", {
    Title = "üé• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Macro",
    Description = "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î Macro ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï",
    Default = false
}):OnChanged(function(value)
    if not selectedFile then
        Fluent:Notify({
            Title = "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
            Content = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
            Duration = 4
        })
        return
    end

    isRecording = value

    if value then
        macroData = {}
        index = 1
        --print("üì∏ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏î Macro")
    else
        -- ‚úÖ ‡∏ñ‡πâ‡∏≤ macroData ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        if #macroData == 0 then
            Fluent:Notify({
                Title = "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô Macro",
                Content = "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÉ‡∏î ‡πÜ ‚Üí ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                Duration = 4
            })
            return
        end

        -- ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏à‡∏≤‡∏Å WorldTitle
        local mapName = "Unknown"
        local success, result = pcall(function()
            local Players = game:GetService("Players")
            local player = Players.LocalPlayer
            local gui = player:WaitForChild("PlayerGui")

            mapName = gui
                :WaitForChild("GameUI")
                :WaitForChild("Top")
                :WaitForChild("Main")
                :WaitForChild("StageInfo")
                :WaitForChild("Inner")
                :WaitForChild("Inner")
                :WaitForChild("WorldTitle").Text or "Unknown"
        end)

        if not success then
            warn("‚ùå ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Map ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", result)
        end

        -- ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå Macro ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        local fullData = {
            Map = mapName,
            Marco_Data = macroData,
            Version = 1,
            Index = #macroData
        }

        writefile("ZSOFT HUB - SpongeBobTD/Marco/" .. selectedFile .. ".json", HttpService:JSONEncode(fullData))

        Fluent:Notify({
            Title = "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            Content = selectedFile .. ".json (" .. mapName .. ")",
            Duration = 4
        })
    end
end)



local function getUnitNameFromUUID(uuid)
    local friendlies = workspace:FindFirstChild("Friendlies")
    if not friendlies then return "Unknown" end

    for _, unit in ipairs(friendlies:GetChildren()) do
        if unit:IsA("Model") and unit:GetAttribute("Id") == uuid then
            return unit.Name -- üß† ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Model = ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏π‡∏ô‡∏¥‡∏ï
        end
    end

    return "Unknown"
end





-- Hook Remote: PlaceTower + UpgradeTower
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local args = { ... }
    local method = getnamecallmethod()

    if not checkcaller() and method == "InvokeServer" then
        local remoteName = tostring(self)

    -- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Wave ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    local function getWaveNumber()
        local gui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
        local waveLabel = gui:WaitForChild("GameUI")
            .Top.Main.StageInfo.Inner.Inner:WaitForChild("CurrentWave")

        local text = waveLabel.Text or ""
        return tonumber(string.match(text, "%d+")) or 0
    end

    -- ‚úÖ Hook Remote: PlaceTower
    if remoteName == "PlaceTower" then
        if isRecording and not isPlacingFromMacro and typeof(args[1]) == "CFrame" and typeof(args[2]) == "number" then
            local unitID = args[2]

            -- üîç Snapshot Friendlies ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏á
            local beforeList = {}
            for _, m in ipairs(workspace:WaitForChild("Friendlies"):GetChildren()) do
                if m:IsA("Model") then
                    beforeList[m] = true
                end
            end

            -- üéØ ‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
            task.defer(function()
                isPlacingFromMacro = true
                placeTower:InvokeServer(args[1], unitID)
                isPlacingFromMacro = false
            end)

            -- üïí ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤ Unit ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            task.delay(0.15, function()
                local friendlies = workspace:WaitForChild("Friendlies")
                local newestUnit = nil

                for i = 1, 20 do  -- ‚úÖ ‡∏•‡∏≠‡∏á‡∏ß‡∏ô‡∏´‡∏≤‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    for _, m in ipairs(friendlies:GetChildren()) do
                        if m:IsA("Model") and not beforeList[m] then
                            if m.PrimaryPart then
                                newestUnit = m
                                break
                            else
                                -- üß† ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á PrimaryPart ‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Part ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                                local part = m:FindFirstChildWhichIsA("BasePart")
                                if part then
                                    pcall(function()
                                        m.PrimaryPart = part
                                    end)
                                    if m.PrimaryPart then
                                        newestUnit = m
                                        break
                                    end
                                end
                            end
                        end
                    end
                    if newestUnit then break end
                    task.wait(0.1)
                end

                if newestUnit and newestUnit.PrimaryPart then
                    local cf = newestUnit.PrimaryPart.CFrame
                    local c = {cf:components()}
                    local cfStr = string.format(
                        "%.7f, %.7f, %.7f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f",
                        unpack(c)
                    )

                    local wave = getWaveNumber()
                    local price = getUnitPrice(unitID)

                    table.insert(macroData, {
                        Index = index,
                        Unit = newestUnit.Name,
                        ID = unitID,
                        CFrame = cfStr,
                        Method = "PlaceTower",
                        RequiredMoney = tostring(price),
                        Wave = wave -- ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Wave ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                    })

                    --print(string.format("üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å %s | ‡∏£‡∏≤‡∏Ñ‡∏≤: %s | Wave: %d", newestUnit.Name, price, wave))
                    index += 1
                else
                    warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö PrimaryPart ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")
                end
            end)
        end


    -- ‚úÖ UpgradeTower
    elseif remoteName == "UpgradeTower" and typeof(args[1]) == "string" then
        local uuid = args[1]

        -- ‚úÖ Call ‡∏à‡∏£‡∏¥‡∏á
        local result = oldNamecall(self, ...)

        if isRecording then
            task.defer(function()
                local friendlies = workspace:WaitForChild("Friendlies")
                local unitModel = nil

                -- üîç ‡∏´‡∏≤ Model ‡∏ó‡∏µ‡πà‡∏°‡∏µ UUID ‡∏ï‡∏£‡∏á
                for _, model in ipairs(friendlies:GetChildren()) do
                    if model:IsA("Model") and model:GetAttribute("Id") == uuid then
                        unitModel = model
                        break
                    end
                end

                if not unitModel then
                    warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Unit ‡∏ó‡∏µ‡πà‡∏°‡∏µ UUID:", uuid)
                    return
                end

                local unitName = unitModel.Name
                local root = unitModel:FindFirstChild("RootPart")
                if not root then
                    warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö RootPart ‡πÉ‡∏ô", unitName)
                    return
                end

                local cf = root.CFrame
                local c = {cf:components()}
                local cfStr = string.format(
                    "%.7f, %.7f, %.7f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f",
                    unpack(c)
                )

                local wave = getWaveNumber()

                table.insert(macroData, {
                    Index = index,
                    Unit = unitName,
                    CFrame = cfStr,
                    Method = "UpgradeTower",
                    Upgrade = 1,
                    Wave = wave -- ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Wave ‡∏ï‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î
                })

                --print(string.format("üîß ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î %s ‡∏ó‡∏µ‡πà Wave %d ‚Üí %s", unitName, wave, cfStr))
                index += 1

                -- ‚úÖ ‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏à‡∏£‡∏¥‡∏á
                task.delay(0.1, function()
                    pcall(function()
                        upgradeTower:InvokeServer(uuid)
                    end)
                end)
            end)
        end

        return result
    end





    end
    return oldNamecall(self, ...)
end))







-- ‚ñ∂Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Playback
local statusDisplay = Tabs.Macro:AddInput("MacroStatus", {
    Title = "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Playback",
    Description = "‡πÅ‡∏™‡∏î‡∏á Index / Unit / ‡πÄ‡∏á‡∏¥‡∏ô",
    Default = "",
    Placeholder = "",
    Multiline = true,
    Disabled = true
})

-- üõ†Ô∏è ‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ï
local upgradeStatusDisplay = Tabs.Macro:AddInput("UpgradeStatus", {
    Title = "üõ†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Upgrade",
    Description = "‡πÅ‡∏™‡∏î‡∏á Unit / ‡πÄ‡∏á‡∏¥‡∏ô / ‡∏Ç‡∏≤‡∏î",
    Default = "",
    Placeholder = "",
    Multiline = true,
    Disabled = true
})


-- ‚ñ∂Ô∏è ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏•‡πà‡∏ô
local isPlaying = false
local currentIndex = 1
local macroList = {}


-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß UNIT
local function updateMacroStatus(index, total, unitName, money, price, wave)
    local shownIndex = math.max(index - 1, 0)
    local safeUnit = tostring(unitName or "Unknown")
    local safeMoney = tonumber(money) or 0
    local safePrice = tonumber(price) or 0
    local missing = math.max(0, safePrice - safeMoney)
    local safeWave = tonumber(wave) or 0  -- ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å JSON

    local statusText = string.format(
        "Index: %d/%d  %s\n‡πÄ‡∏á‡∏¥‡∏ô: %d ‡∏Ç‡∏≤‡∏î: %d Wave: %d",
        shownIndex, total, safeUnit, safeMoney, missing, safeWave
    )
    statusDisplay:SetValue(statusText)
end



-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î UNIT
local function updateUpgradeStatus(unitName, money, price, wave)
    local safeUnit = tostring(unitName or "Unknown")
    local safeMoney = tonumber(money) or 0
    local safePrice = tonumber(price) or 0
    local missing = math.max(0, safePrice - safeMoney)
    local safeWave = tonumber(wave) or 0 -- ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

    local statusText = string.format(
        "‡∏¢‡∏π‡∏ô‡∏¥‡∏ï: %s\n‡πÄ‡∏á‡∏¥‡∏ô: %d ‡∏Ç‡∏≤‡∏î: %d Wave: %d",
        safeUnit, safeMoney, missing, safeWave
    )

    upgradeStatusDisplay:SetValue(statusText)
end





-- ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï
local TweenService = game:GetService("TweenService")

local function showNextIndicator3D(pos, mode) mode = typeof(mode) == "string" and mode or nil

    local old = workspace:FindFirstChild("_MacroIndicator3D")
    if old then old:Destroy() end

    local part = Instance.new("Part")
    part.Name = "_MacroIndicator3D"
    part.Anchored = true
    part.CanCollide = false
    part.Transparency = 0.2
    part.Size = Vector3.new(3.5, 6.5, 3.5)
    part.Shape = Enum.PartType.Cylinder
    part.Color = Color3.fromRGB(0, 255, 0)
    part.Material = Enum.Material.Neon
    part.CFrame = CFrame.new(pos + Vector3.new(0, 0.25, 0)) * CFrame.Angles(0, 0, math.rad(90))
    part.Parent = workspace

    -- ‚úÖ Billboard text
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "_MacroText"
    billboard.Adornee = part
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = 150
    billboard.Parent = part

    local text = Instance.new("TextLabel")
    text.Size = UDim2.new(1, 0, 1, 0)
    text.BackgroundTransparency = 1
    text.Text = (mode == "upgrade") and "üõ†Ô∏è Upgrade Unit" or "üìç Place Unit"
    text.TextColor3 = Color3.fromRGB(0, 255, 0)
    text.TextStrokeTransparency = 0.3
    text.TextScaled = true
    text.Font = Enum.Font.GothamBold
    text.Parent = billboard

    -- ‚úÖ Tween shimmer
    local tweenInfo = TweenInfo.new(0.6, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
    local tween = TweenService:Create(part, tweenInfo, { Transparency = 0.6 })
    tween:Play()
end



local function hideNextIndicator3D()
    local old = workspace:FindFirstChild("_MacroIndicator3D")
    if old then old:Destroy() end
end



local ReplicatedStorage = game:GetService("ReplicatedStorage")
local placeTowerRemote = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("_Index")
    :WaitForChild("acecateer_knit@1.7.1")
    :WaitForChild("knit")
    :WaitForChild("Services")
    :WaitForChild("TowerService")
    :WaitForChild("RF")
    :WaitForChild("PlaceTower")


local upgradeCountByUUID = {}
local baseUpgradeMemory = {}





--------------------------------- PLAYBACK MACRO ---------------------------
-- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
local currentPlaybackToken = 0
local isPlaying = false
_G.MacroIsPlaying = false

local macroList = {}
local currentIndex = 1
local upgradeCountByUUID = {}
local baseUpgradeMemory = {}
local placedUUIDMap = {}

-- ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô nil
Toggles = Toggles or {}

-- ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô macro
Toggles.PlayToggle = Tabs.Macro:AddToggle("PlayToggle", {
    Title = "‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô Macro (Hybrid)",
    Description = "‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏≠‡∏Ñ‡πà‡∏≠‡∏¢‡∏ß‡∏≤‡∏á",
    Default = false
})


-- ‚úÖ Watcher ‡∏´‡∏ô‡πâ‡∏≤ roundSummary
task.spawn(function()

    while true do
        task.wait(0.3)
        if isPlaying and roundSummary and roundSummary.Enabled then
            --print("üìò [Watcher] ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Summary ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö")

            -- ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î loop macro ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î
            currentPlaybackToken += 1
            isPlaying = false
            _G.MacroIsPlaying = false

            -- ‚úÖ ‡∏£‡∏≠‡∏à‡∏ô Summary ‡∏õ‡∏¥‡∏î
            while roundSummary.Enabled do task.wait(0.2) end

            -- ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            task.delay(0.2, function()
                --print("üîÅ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Playback")
                currentIndex = 1
                upgradeCountByUUID = {}
                baseUpgradeMemory = {}
                placedUUIDMap = {}
                statusDisplay:SetValue("")
                upgradeStatusDisplay:SetValue("")
                hideNextIndicator3D()
            end)

            -- ‚úÖ ‡∏™‡∏±‡πà‡∏á Toggle ‡∏õ‡∏¥‡∏î-‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            task.wait(0.8)
            if Toggles.PlayToggle.Value == true then
                --print("üîÅ ‡∏õ‡∏¥‡∏î-‡πÄ‡∏õ‡∏¥‡∏î Toggle ‡πÉ‡∏´‡∏°‡πà")
                Toggles.PlayToggle:SetValue(false)
                task.wait(1.2)
                Toggles.PlayToggle:SetValue(true)
            end
        end
    end
end)




-- ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Macro)
local isPlayToggleLocked = false

Toggles.PlayToggle:OnChanged(function(state)
    if isPlayToggleLocked then return end
    isPlayToggleLocked = true

    task.delay(0.5, function() -- ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ callback ‡∏à‡∏ö
        isPlayToggleLocked = false
    end)


    if not state then
        isPlaying = false
        _G.MacroIsPlaying = false
        hideNextIndicator3D()
        statusDisplay:SetValue("")
        upgradeStatusDisplay:SetValue("")

        Fluent:Notify({
            Title = "‚õî ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô",
            Content = "Playback ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß",
            Duration = 3
        })
        return
    end

    ---------------------- Global CONFIG SETTING ALL FOR Story , Raid , Challenge ----------------------

    -- ‚úÖ Normalize map name ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
    local function normalizeMapName(str)
        return (str or "")
            :lower()
            :gsub("[^a-z0-9]", "") -- ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà a-z ‡πÅ‡∏•‡∏∞ 0-9
    end



    -- ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏î‡πà‡∏≤‡∏ô
    local function splitMapName(str)
        local name, num = string.match(str, "^(.-)%s*%-*%s*(%d+)$")
        return normalizeMapName(name), tonumber(num)
    end


    -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏î Start Vote
    local function waitForUpdatedMapName(timeout)
        local player = game:GetService("Players").LocalPlayer
        local gui = player:WaitForChild("PlayerGui")

        local voteButton = gui
            :WaitForChild("GameUI")
            :WaitForChild("VoteStart")
            :WaitForChild("Main")
            :WaitForChild("Button")

        -- ‚úÖ ‡∏¢‡∏¥‡∏á RemoteStart ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö UI ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏à‡∏£‡∏¥‡∏á
        local voteRemote = game:GetService("ReplicatedStorage")
            :WaitForChild("Packages")
            :WaitForChild("_Index")
            :WaitForChild("acecateer_knit@1.7.1")
            :WaitForChild("knit")
            :WaitForChild("Services")
            :WaitForChild("GameService")
            :WaitForChild("RF")
            :WaitForChild("VoteStartRound")

        local ok = pcall(function()
            voteRemote:InvokeServer()
        end)
        if ok then  end

        -- ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡πÅ‡∏°‡∏û‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        local start = tick()
        repeat
            if not voteButton.Visible then
                task.wait(0.5) -- ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ WorldTitle ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                break
            end
            task.wait(0.1)
        until tick() - start > (timeout or 6)

        -- ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        local worldTitle = gui
            :WaitForChild("GameUI")
            :WaitForChild("Top")
            :WaitForChild("Main")
            :WaitForChild("StageInfo")
            :WaitForChild("Inner")
            :WaitForChild("Inner")
            :WaitForChild("WorldTitle")

        return worldTitle.Text
    end
    ---------------------- END Global CONFIG SETTING ALL FOR Story , Raid , Challenge ----------------------


    ---------------------- Switch Story Mode Macro ----------------------
    -- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Story Mode
    if _G.useStoryConfig then
        --print("üß† [StoryMode] ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

        local mapNow = waitForUpdatedMapName(5)
        if not mapNow or mapNow == "" then
            Fluent:Notify({
                Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û",
                Content = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏à‡∏≤‡∏Å UI ‡πÑ‡∏î‡πâ",
                Duration = 4
            })
            return
        end

        local mapName, stageNum = splitMapName(mapNow)
        if not stageNum then
            Fluent:Notify({
                Title = "‚ùå ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏î‡πà‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                Content = "Map: " .. tostring(mapNow),
                Duration = 4
            })
            return
        end

        -- ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á Act
        local selectedStoryFile = nil

        if mapName == "conchstreet" then
            if stageNum >= 1 and stageNum <= 5 then
                selectedStoryFile = _G.SelectedAct1File
            elseif stageNum >= 6 and stageNum <= 10 then
                selectedStoryFile = _G.SelectedAct2File
            end

        elseif mapName == "jellyfishfields" then
            if stageNum >= 1 and stageNum <= 5 then
                selectedStoryFile = _G.SelectedJelly1File
            elseif stageNum >= 6 and stageNum <= 10 then
                selectedStoryFile = _G.SelectedJelly2File
            end

        elseif mapName == "krustykrab" then
            if stageNum >= 1 and stageNum <= 5 then
                selectedStoryFile = _G.SelectedKrusty1File
            elseif stageNum >= 6 and stageNum <= 10 then
                selectedStoryFile = _G.SelectedKrusty2File
            end

        elseif mapName == "sandystreedome" then
            if stageNum >= 1 and stageNum <= 5 then
                selectedStoryFile = _G.SelectedSandy1File
            elseif stageNum >= 6 and stageNum <= 10 then
                selectedStoryFile = _G.SelectedSandy2File
            end

        elseif mapName == "chumbucket" then
            if stageNum >= 1 and stageNum <= 5 then
                selectedStoryFile = _G.SelectedChum1File
            elseif stageNum >= 6 and stageNum <= 10 then
                selectedStoryFile = _G.SelectedChum2File
            end

        elseif mapName == "rockbottom" then
            if stageNum >= 1 and stageNum <= 5 then
                selectedStoryFile = _G.SelectedRock1File
            elseif stageNum >= 6 and stageNum <= 10 then
                selectedStoryFile = _G.SelectedRock2File
            end
        end

        -- ‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
        if not selectedStoryFile or selectedStoryFile == "" then
            Fluent:Notify({
                Title = "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
                Content = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ",
                Duration = 4
            })
            return
        end

        -- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        local filePath = "ZSOFT HUB - SpongeBobTD/Marco/" .. selectedStoryFile .. ".json"
        if not isfile(filePath) then
            Fluent:Notify({
                Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå",
                Content = selectedStoryFile .. ".json",
                Duration = 4
            })
            return
        end

        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(filePath))
        end)

        if not success or type(data) ~= "table" or not data.Map then
            Fluent:Notify({
                Title = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                Content = "JSON ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå Map",
                Duration = 4
            })
            return
        end

        -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
        local fileMapName, fileStageNum = splitMapName(data.Map)
        if normalizeMapName(fileMapName) ~= mapName then
            Fluent:Notify({
                Title = "‚ö†Ô∏è ‡πÅ‡∏°‡∏û‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
                Content = "‡πÉ‡∏ô‡πÄ‡∏Å‡∏°: " .. mapNow .. "\n‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: " .. data.Map,
                Duration = 5
            })
            return
        end

        -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á Act ‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        local function validateAct(fileVar, minStage, maxStage, label)
            if selectedStoryFile == fileVar and (stageNum < minStage or stageNum > maxStage) then
                Fluent:Notify({
                    Title = "‚ùå ‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á " .. label,
                    Content = "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏î‡πà‡∏≤‡∏ô: " .. tostring(stageNum),
                    Duration = 4
                })
                return false
            end
            return true
        end

        if not (
            validateAct(_G.SelectedAct1File, 1, 5, "Conch Street Act 1") and
            validateAct(_G.SelectedAct2File, 6, 10, "Conch Street Act 2") and

            validateAct(_G.SelectedJelly1File, 1, 5, "Jellyfish Fields Act 1") and
            validateAct(_G.SelectedJelly2File, 6, 10, "Jellyfish Fields Act 2") and

            validateAct(_G.SelectedKrusty1File, 1, 5, "Krusty Krab Act 1") and
            validateAct(_G.SelectedKrusty2File, 6, 10, "Krusty Krab Act 2") and

            validateAct(_G.SelectedSandy1File, 1, 5, "Sandy's Treedome Act 1") and
            validateAct(_G.SelectedSandy2File, 6, 10, "Sandy's Treedome Act 2") and

            validateAct(_G.SelectedChum1File, 1, 5, "Chum Bucket Act 1") and
            validateAct(_G.SelectedChum2File, 6, 10, "Chum Bucket Act 2") and

            validateAct(_G.SelectedRock1File, 1, 5, "Rock Bottom Act 1") and
            validateAct(_G.SelectedRock2File, 6, 10, "Rock Bottom Act 2")
        ) then
            return
        end

        -- ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô
        selectedFile = selectedStoryFile
        macroList = data.Marco_Data or {}
        print("‚úÖ [StoryMode] ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå:", selectedFile, "| ‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:", data.Map, "| ‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏õ‡∏±‡∏à‡∏∏‡∏ö‡∏±‡∏ô:", mapNow, "| ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô INDEX:", #macroList)
    end

    
    ---------------------- END Switch Story Mode Macro ----------------------


    ----------------------  Switch Raid Mode Macro ----------------------

    if _G.useRaidMode then
        --print("üß† [RaidMode] ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

        local mapNow = waitForUpdatedMapName(5)
        if not mapNow or mapNow == "" then
            Fluent:Notify({
                Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û",
                Content = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏à‡∏≤‡∏Å UI ‡πÑ‡∏î‡πâ",
                Duration = 4
            })
            return
        end

        local mapName = normalizeMapName(mapNow)
        local selectedRaidFile = nil

        -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡πÉ‡∏ô Raid
        if mapName == "mermalair" then
            selectedRaidFile = _G.SelectedRaidMermalairFile

        elseif mapName == "middleages" then
            selectedRaidFile = _G.SelectedRaidMiddleAgesFile
        end

        -- ‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
        if not selectedRaidFile or selectedRaidFile == "" then
            Fluent:Notify({
                Title = "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
                Content = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏°‡∏û‡∏ô‡∏µ‡πâ",
                Duration = 4
            })
            return
        end

        -- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        local filePath = "ZSOFT HUB - SpongeBobTD/Marco/" .. selectedRaidFile .. ".json"
        if not isfile(filePath) then
            Fluent:Notify({
                Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå",
                Content = selectedRaidFile .. ".json",
                Duration = 4
            })
            return
        end

        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(filePath))
        end)

        if not success or type(data) ~= "table" or not data.Map then
            Fluent:Notify({
                Title = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                Content = "JSON ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå Map",
                Duration = 4
            })
            return
        end

        -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
        local fileMapName = normalizeMapName(data.Map)
        if fileMapName ~= mapName then
            Fluent:Notify({
                Title = "‚ö†Ô∏è ‡πÅ‡∏°‡∏û‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
                Content = "‡πÉ‡∏ô‡πÄ‡∏Å‡∏°: " .. mapNow .. "\n‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: " .. data.Map,
                Duration = 5
            })
            return
        end

        -- ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô
        selectedFile = selectedRaidFile
        macroList = data.Marco_Data or {}

        print("‚úÖ [RaidMode] ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå:", selectedFile, "| ‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:", data.Map, "| ‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Å‡∏°:", mapNow, "| ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô INDEX:", #macroList)
    end

    ---------------------- END Switch Raid Mode Macro ----------------------


    ----------------------  Switch Challenge Mode Macro ----------------------

    if _G.useChallengeMode then
        --print("üß† [ChallengeMode] ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

        local mapNow = waitForUpdatedMapName(5)
        if not mapNow or mapNow == "" then
            Fluent:Notify({
                Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û",
                Content = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏à‡∏≤‡∏Å UI ‡πÑ‡∏î‡πâ",
                Duration = 4
            })
            return
        end

        local mapName = normalizeMapName(mapNow)
        local selectedChallengeFile = nil

        -- ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏°‡∏û‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global
        local challengeMapConfig = {
            mrspuffsboatingschool = "_G.SelectedChallengeBoatingFile",
            flyingdutchmanship     = "_G.SelectedChallengeDutchmanFile",
            pattyvault             = "_G.SelectedChallengePattyFile",
            conchstreet            = "_G.SelectedChallengeConchFile",
            -- ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        }

        -- ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡∏û
        local fileVarName = challengeMapConfig[mapName]
        if fileVarName then
            selectedChallengeFile = loadstring("return " .. fileVarName)()
        end

        -- ‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
        if not selectedChallengeFile or selectedChallengeFile == "" then
            Fluent:Notify({
                Title = "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
                Content = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏°‡∏û‡∏ô‡∏µ‡πâ",
                Duration = 4
            })
            return
        end

        -- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        local filePath = "ZSOFT HUB - SpongeBobTD/Marco/" .. selectedChallengeFile .. ".json"
        if not isfile(filePath) then
            Fluent:Notify({
                Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå",
                Content = selectedChallengeFile .. ".json",
                Duration = 4
            })
            return
        end

        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(filePath))
        end)

        if not success or type(data) ~= "table" or not data.Map then
            Fluent:Notify({
                Title = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                Content = "JSON ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå Map",
                Duration = 4
            })
            return
        end

        -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
        local fileMapName = normalizeMapName(data.Map)
        if fileMapName ~= mapName then
            Fluent:Notify({
                Title = "‚ö†Ô∏è ‡πÅ‡∏°‡∏û‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
                Content = "‡πÉ‡∏ô‡πÄ‡∏Å‡∏°: " .. mapNow .. "\n‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: " .. data.Map,
                Duration = 5
            })
            return
        end

        -- ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô
        selectedFile = selectedChallengeFile
        macroList = data.Marco_Data or {}

        print("‚úÖ [ChallengeMode] ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå:", selectedFile, "| ‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:", data.Map, "| ‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Å‡∏°:", mapNow, "| ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô INDEX:", #macroList)
    end

    ---------------------- END Switch Challenge Mode Macro ----------------------



    --  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if not selectedFile then
        Fluent:Notify({
            Title = "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
            Content = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô",
            Duration = 4
        })
        return
    end

    --  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    local filePath = "ZSOFT HUB - SpongeBobTD/Marco/" .. selectedFile .. ".json"
    if not isfile(filePath) then
        Fluent:Notify({
            Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå",
            Content = selectedFile .. ".json",
            Duration = 4
        })
        return
    end

    --  ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
    local content = readfile(filePath)
    local success, data = pcall(function()
        return HttpService:JSONDecode(content)
    end)

    if not success or type(data) ~= "table" or not data.Marco_Data then
        Fluent:Notify({
            Title = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
            Content = "‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Macro",
            Duration = 4
        })
        return
    end

    --  Bypass Map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Delta X
    pcall(function()
        data.Map = "Bypass"
    end)

    --  ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Macro ‡∏à‡∏£‡∏¥‡∏á
    macroList = data.Marco_Data

    --  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ô macro ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏´‡∏°
    if #macroList == 0 then
        isPlaying = false
        _G.MacroIsPlaying = false
        Fluent:Notify({
            Title = "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            Content = "Macro ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ß‡∏≤‡∏á‡πÉ‡∏î ‡πÜ",
            Duration = 4
        })
        return
    end






    -- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡πà‡∏ô Macro
    isPlaying = true
    _G.MacroIsPlaying = true
    currentPlaybackToken += 1
    local myToken = currentPlaybackToken

    task.spawn(function()
    
        local gui = Players.LocalPlayer:WaitForChild("PlayerGui")
        local waveLabel = gui:WaitForChild("GameUI").Top.Main.StageInfo.Inner.Inner:WaitForChild("CurrentWave")
        roundSummary = gui:WaitForChild("RoundSummary")



        local function getWaveNumber()
            local raw = waveLabel.Text or ""
            return tonumber(string.match(raw, "%d+")) or 0
        end

        Fluent:Notify({
            Title = "üïí ‡∏£‡∏≠ Wave 1",
            Content = "‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° Playback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà",
            Duration = 4
        })

        repeat task.wait(0.2) until not roundSummary.Enabled and getWaveNumber() == 1

        -- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
        currentIndex = 1
        upgradeCountByUUID = {}
        baseUpgradeMemory = {}
        placedUUIDMap = {}
        statusDisplay:SetValue("")
        upgradeStatusDisplay:SetValue("")


        hideNextIndicator3D()
        isPlaybackSuspended = false



    local upgradeTower = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("_Index")
    :WaitForChild("acecateer_knit@1.7.1")
    :WaitForChild("knit")
    :WaitForChild("Services")
    :WaitForChild("GameService")
    :WaitForChild("RF")
    :WaitForChild("UpgradeTower")


    local function getWaveNumber()
        local raw = waveLabel.Text or ""
        return tonumber(string.match(raw, "%d+")) or 0
    end

    -- ‚úÖ ‡∏î‡∏∂‡∏á Vector3 ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    local function parseVector3(str)
        local parts = string.split(str, ", ")
        return Vector3.new(tonumber(parts[1]), tonumber(parts[2]), tonumber(parts[3]))
    end

    -- ‚úÖ CFrame ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏ï‡∏µ‡∏•‡∏±‡∏á‡∏Å‡∏≤)
    local function parseFullCFrame(str)
        local parts = string.split(str, ", ")
        for i = 1, #parts do parts[i] = tonumber(parts[i]) end

        local pos = Vector3.new(parts[1], parts[2], parts[3])
        local right = Vector3.new(parts[4], parts[5], parts[6])
        local up = Vector3.new(parts[7], parts[8], parts[9])

        local look = right:Cross(up).Unit
        return CFrame.fromMatrix(pos, right, up)
    end

    

    -- ‚úÖ ‡∏´‡∏≤ Model ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    local function findUnitFromMacro(unitName, pos)
        for _, model in ipairs(workspace:WaitForChild("Friendlies"):GetChildren()) do
            if model:IsA("Model") and model.Name == unitName and model.PrimaryPart then
                if (model.PrimaryPart.Position - pos).Magnitude <= 0.25 then

                    return model
                end
            end
        end
        return nil
    end


    -- üì¶ ‡∏´‡∏≤ baseCost ‡∏à‡∏≤‡∏Å PlaceTower
    local function findBaseCostFromMacro(unitName)
        for _, entry in ipairs(macroList) do
            if entry.Method == "PlaceTower" and entry.Unit == unitName then
                return tonumber(entry.RequiredMoney or entry.requiredmoney)
            end
        end
        return nil
    end

    local upgradeCountByUUID = {}


    -- ‚úÖ ‡∏£‡∏≠‡∏à‡∏ô‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    local myToken = currentPlaybackToken
    while isPlaying and myToken == currentPlaybackToken do


        Fluent:Notify({
            Title = "üïí ‡∏£‡∏≠ Wave 1",
            Content = "‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° Playback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà",
            Duration = 4
        })

        -- ‚úÖ ‡∏£‡∏≠‡∏à‡∏ô Wave 1 ‡πÅ‡∏•‡∏∞ Summary ‡∏õ‡∏¥‡∏î ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
        repeat task.wait(0.2)
        until not roundSummary.Enabled or getWaveNumber() == 1


        -- ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ Wave 1 ‡πÅ‡∏•‡πâ‡∏ß
        isPlaybackSuspended = false
        currentIndex = 1 -- ‚úÖ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß
        --print("‚ñ∂Ô∏è [Macro] ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà index 1")


        if not isPlaying then break end

        local success = pcall(function() voteRemote:InvokeServer() end)
        if success then  end

        local upgradedPositions = {} -- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
        local function getKeyFromVector3(v)
            return string.format("%.10f,%.10f,%.10f", v.X, v.Y, v.Z)
        end


        -- ‚ñ∂Ô∏è ‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô Macro
        while isPlaying and currentIndex <= #macroList do


        local action = macroList[currentIndex]

        local cf = parseFullCFrame(action.CFrame)

        --  ‡∏£‡∏∞‡∏ö‡∏∏ mode ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏™‡∏î‡∏á GUI ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏á‡πÄ‡∏ó‡πà ‡πÜ 
        if action.Method == "PlaceTower" then
            showNextIndicator3D(cf.Position, "place")
        elseif action.Method == "UpgradeTower" then
            showNextIndicator3D(cf.Position, "upgrade")
        end


        -- ‚úÖ ‡∏£‡∏≠ Wave ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏∏
        if action.Wave and type(action.Wave) == "number" then
            while isPlaying and getWaveNumber() < action.Wave do
                --warn(string.format("‚è≥ [Wave %d] ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á Wave %d ‚Üí ‡∏£‡∏≠...", getWaveNumber(), action.Wave))
                task.wait(0.3)
            end
        end

        if action.Method == "PlaceTower" then
            local cf = parseFullCFrame(action.CFrame)
            local price = getUnitPrice(action.ID)
            local currentMoney = getCurrentYen()

            updateMacroStatus(currentIndex, #macroList, action.Unit, currentMoney, price, action.Wave)

            

            if currentMoney >= price then
                local thisIndex = currentIndex -- ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö index ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠ map UUID ‡πÉ‡∏´‡πâ SeaBear

                -- üîç Snapshot Friendlies ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏á
                local beforeList = {}
                for _, m in ipairs(workspace:WaitForChild("Friendlies"):GetChildren()) do
                    if m:IsA("Model") then
                        beforeList[m] = true
                    end
                end

                -- üéØ ‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á
                placeTowerRemote:InvokeServer(cf, action.ID)

                -- üïí ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤ Unit ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                task.delay(0.15, function()
                    local friendlies = workspace:WaitForChild("Friendlies")
                    local newestUnit = nil

                    for _, m in ipairs(friendlies:GetChildren()) do
                        if m:IsA("Model") and not beforeList[m] and m.PrimaryPart then
                            newestUnit = m
                            break
                        end
                    end

                    if newestUnit then
                        local uuid = newestUnit:GetAttribute("Id")
                        --print("‚úÖ ‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", newestUnit.Name, "‚Üí UUID:", uuid or "N/A")

                        -- ‚úÖ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ SeaBear ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞ map UUID
                        if (newestUnit.Name == "SeaBear" or newestUnit.Name == "Lion Fish") and uuid then
                            placedUUIDMap = placedUUIDMap or {}
                            placedUUIDMap[thisIndex] = uuid
                        end


                        newestUnit:SetAttribute("FromMacroIndex", thisIndex)
                    else
                        warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á")
                    end
                end)

                currentIndex += 1
                hideNextIndicator3D()
                task.wait(0.5)
            end


        elseif action.Method == "UpgradeTower" then
            local pos = parseVector3(action.CFrame)
            updateMacroStatus(currentIndex, #macroList, action.Unit, "Upgrade", action.Wave)

            -- üîí Whitelist ‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
            local skipPositionCheckUnit = {
                ["SeaBear"] = true,
                ["Lion Fish"] = true
            }


            local foundModel = nil
            local upgradedAlready = false

            -- üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤ model ‡∏à‡∏≤‡∏Å UUID ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
            for _, model in ipairs(workspace:WaitForChild("Friendlies"):GetChildren()) do
                if model:IsA("Model") and model.Name == action.Unit then
                    local id = model:GetAttribute("Id")
                    if id and upgradeCountByUUID[id] and skipPositionCheckUnit[action.Unit] then
                        foundModel = model
                        upgradedAlready = true
                        break
                    end
                end
            end

            -- ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô SeaBear ‡∏´‡∏£‡∏∑‡∏≠ Lion Fish ‚Üí ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å placedUUIDMap
            if not upgradedAlready and (action.Unit == "SeaBear" or action.Unit == "Lion Fish") and placedUUIDMap and placedUUIDMap[currentIndex - 1] then
                local expectedUUID = placedUUIDMap[currentIndex - 1]
                for _, model in ipairs(workspace:WaitForChild("Friendlies"):GetChildren()) do
                    if model:IsA("Model") and model.Name == action.Unit and model:GetAttribute("Id") == expectedUUID then
                        foundModel = model
                        --print("‚úÖ " .. action.Unit .. ": ‡πÉ‡∏ä‡πâ UUID ‡∏à‡∏≤‡∏Å placedUUIDMap ‚Üí", expectedUUID)
                        break
                    end
                end
            end


            -- üîÅ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ uuid ‚Üí ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á + retry ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ó‡∏∏‡∏Å‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á SeaBear ‡∏ñ‡πâ‡∏≤ UUID ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠)
            if not upgradedAlready and not foundModel then
                local maxRetry = 1000
                local retry = 0
                while not foundModel and retry < maxRetry and isPlaying do
                    for _, model in ipairs(workspace:WaitForChild("Friendlies"):GetChildren()) do
                        if model:IsA("Model") and model.Name == action.Unit and model.PrimaryPart then
                            local modelPos = model.PrimaryPart.Position
                            if (modelPos - pos).Magnitude <= 0.5 then
                                foundModel = model
                                break
                            end
                        end
                    end

                    if not foundModel then
                        retry += 1
                        warn(string.format("üîç [Retry %d/%d] ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏¢‡∏π‡∏ô‡∏¥‡∏ï %s ‡∏ó‡∏µ‡πà %.3f, %.3f, %.3f",
                            retry, maxRetry, action.Unit, pos.X, pos.Y, pos.Z))
                        task.wait(0.2)
                    end
                end
            end

            if not foundModel then
                warn(string.format("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ï ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î: %s ‡∏ó‡∏µ‡πà %.3f, %.3f, %.3f", action.Unit, pos.X, pos.Y, pos.Z))
                return
            end

            local uuid = foundModel:GetAttribute("Id")
            if not uuid then
                warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö UUID ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏õ index ‡∏ô‡∏µ‡πâ")
                return
            end

            local currentLevel = (upgradeCountByUUID[uuid] or 0) + 1

            -- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á soft scale
            local scaleTable = {1.3, 1.6, 2.5, 3.0, 3.8}

            baseUpgradeMemory = baseUpgradeMemory or {}
            local unitName = action.Unit
            local base = baseUpgradeMemory[unitName]
            if not base then
                base = findBaseCostFromMacro(unitName) or 500
                baseUpgradeMemory[unitName] = base
            end

            local scale = scaleTable[currentLevel] or (scaleTable[#scaleTable] * 1.2)
            local requiredCost = math.floor(base * scale)
            local startTime = tick()

            while isPlaying do
                if not isPlaying or isPlaybackSuspended then
                    return -- ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î function macro ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô
                end

                local currentMoney = getCurrentYen()
                if currentMoney >= requiredCost then
                    local success, result = pcall(function()
                        return upgradeTower:InvokeServer(uuid)
                    end)

                    if success then
                        --print(string.format("üõ†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î %s ‚Üí UUID: %s | ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô: %d", unitName, uuid, requiredCost))
                        updateUpgradeStatus(unitName, currentMoney, requiredCost, action.Wave)

                        upgradeCountByUUID[uuid] = currentLevel
                        currentIndex += 1
                        task.wait(0.5)
                    else
                        warn("‚ùå Upgrade ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                    end
                    break
                end

                if tick() - startTime > 60 then
                    warn("‚è≥ ‡πÄ‡∏Å‡∏¥‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‚Üí ‡∏£‡∏≠‡∏ï‡πà‡∏≠")
                end

                task.wait(0.2)
            end

            task.wait(0.3)
        end



            task.wait(0.6)
        end

        Fluent:Notify({
            Title = "üîÅ ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
            Content = "‡∏£‡∏≠‡πÄ‡∏Å‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà",
            Duration = 3
        })

        statusDisplay:SetValue("")
        upgradeStatusDisplay:SetValue("")


        hideNextIndicator3D()
        while isPlaying and not roundSummary.Enabled do task.wait(0.2) end
    end

    -- ‚úÖ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    isPlaying = false
    _G.MacroIsPlaying = false
    statusDisplay:SetValue("")
    upgradeStatusDisplay:SetValue("")

    hideNextIndicator3D()
end)
end)




-- Auto Switch Mode Macro File
Tabs.Macro:AddSection("Automactic Swap Config")




---------------- STORY MODE CONFIG --------------------

-- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Config ‡∏î‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Story Mode
_G.useStoryConfig = _G.useStoryConfig or false

-- Conch Street
_G.SelectedAct1File = _G.SelectedAct1File or nil
_G.SelectedAct2File = _G.SelectedAct2File or nil

-- Jellyfish Fields
_G.SelectedJelly1File = _G.SelectedJelly1File or nil
_G.SelectedJelly2File = _G.SelectedJelly2File or nil

-- Krusty Krab
_G.SelectedKrusty1File = _G.SelectedKrusty1File or nil
_G.SelectedKrusty2File = _G.SelectedKrusty2File or nil

-- Sandy's Treedome
_G.SelectedSandy1File = _G.SelectedSandy1File or nil
_G.SelectedSandy2File = _G.SelectedSandy2File or nil

-- Chum Bucket
_G.SelectedChum1File = _G.SelectedChum1File or nil
_G.SelectedChum2File = _G.SelectedChum2File or nil

-- Rock Bottom
_G.SelectedRock1File = _G.SelectedRock1File or nil
_G.SelectedRock2File = _G.SelectedRock2File or nil



-- üìÅ ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå macro
local function getMacroFileNames()
    local folder = "ZSOFT HUB - SpongeBobTD/Marco/"
    local files = isfolder(folder) and listfiles(folder) or {}
    local names = {}

    for _, file in ipairs(files) do
        local name = string.match(file, "([^\\/]+)%.json$")
        if name then table.insert(names, name) end
    end

    table.sort(names)
    return names
end

-- ‚úÖ Toggle: ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Story Mode
Tabs.Macro:AddToggle("UseStoryConfig", {
    Title = "üìÅ Use Story Mode Config",
    Description = "‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå Macro ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô Story Mode",
    Default = _G.useStoryConfig,
    Callback = function(state)
        _G.useStoryConfig = state
        Fluent:Notify({
            Title = state and "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Story Mode" or "‚õî ‡∏õ‡∏¥‡∏î Story Mode",
            Content = "‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏° Act ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ",
            Duration = 3
        })
    end
})

-- Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Act
local acts = {
    -- Conch Street
    {
        title = "Conch Street Act 1",
        globalVar = "SelectedAct1File",
        description = "Act 1 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 5"
    },
    {
        title = "Conch Street Act 2",
        globalVar = "SelectedAct2File",
        description = "Act 2 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 6 ‡∏ñ‡∏∂‡∏á 10"
    },

    -- Jellyfish Fields
    {
        title = "Jellyfish Fields Act 1",
        globalVar = "SelectedJelly1File",
        description = "Act 1 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 5"
    },
    {
        title = "Jellyfish Fields Act 2",
        globalVar = "SelectedJelly2File",
        description = "Act 2 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 6 ‡∏ñ‡∏∂‡∏á 10"
    },

    -- Krusty Krab
    {
        title = "Krusty Krab Act 1",
        globalVar = "SelectedKrusty1File",
        description = "Act 1 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 5"
    },
    {
        title = "Krusty Krab Act 2",
        globalVar = "SelectedKrusty2File",
        description = "Act 2 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 6 ‡∏ñ‡∏∂‡∏á 10"
    },

    -- Sandy's Treedome
    {
        title = "Sandy's Treedome Act 1",
        globalVar = "SelectedSandy1File",
        description = "Act 1 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 5"
    },
    {
        title = "Sandy's Treedome Act 2",
        globalVar = "SelectedSandy2File",
        description = "Act 2 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 6 ‡∏ñ‡∏∂‡∏á 10"
    },

    -- Chum Bucket
    {
        title = "Chum Bucket Act 1",
        globalVar = "SelectedChum1File",
        description = "Act 1 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 5"
    },
    {
        title = "Chum Bucket Act 2",
        globalVar = "SelectedChum2File",
        description = "Act 2 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 6 ‡∏ñ‡∏∂‡∏á 10"
    },

    -- Rock Bottom
    {
        title = "Rock Bottom Act 1",
        globalVar = "SelectedRock1File",
        description = "Act 1 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 5"
    },
    {
        title = "Rock Bottom Act 2",
        globalVar = "SelectedRock2File",
        description = "Act 2 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 6 ‡∏ñ‡∏∂‡∏á 10"
    },
}



for i, act in ipairs(acts) do
    _G[act.globalVar] = _G[act.globalVar] or nil

    Tabs.Macro:AddDropdown("ActDropdown_" .. i, {
        Title = "üìÅ " .. act.title,
        Description = act.description,
        Values = getMacroFileNames(),
        Default = _G[act.globalVar],
        Multi = false,
        Callback = function(selected)
            _G[act.globalVar] = selected
            Fluent:Notify({
                Title = "‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ " .. act.title,
                Content = "‡∏à‡∏∞‡πÉ‡∏ä‡πâ: " .. selected,
                Duration = 3
            })
        end
    })
end
---------------- END STORY MODE CONFIG --------------------



-- Auto Switch Mode Macro File
Tabs.Macro:AddSection("Raid Configuration")


---------------- RAID MODE CONFIG --------------------

-- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
_G.useRaidMode = _G.useRaidMode or false

-- ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏ô Raid Mode
_G.SelectedRaidMermalairFile = _G.SelectedRaidMermalairFile or nil
_G.SelectedRaidMiddleAgesFile = _G.SelectedRaidMiddleAgesFile or nil



-- üìÅ ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå macro
local function getMacroFileNames()
    local folder = "ZSOFT HUB - SpongeBobTD/Marco/"
    local files = isfolder(folder) and listfiles(folder) or {}
    local names = {}

    for _, file in ipairs(files) do
        local name = string.match(file, "([^\\/]+)%.json$")
        if name then table.insert(names, name) end
    end

    table.sort(names)
    return names
end

-- ‚úÖ Toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î Raid
Tabs.Macro:AddToggle("UseRaidMode", {
    Title = "üåÄ Use Raid Mode Config",
    Description = "‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå Macro ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô Raid Mode",
    Default = _G.useRaidMode,
    Callback = function(state)
        _G.useRaidMode = state
        Fluent:Notify({
            Title = state and "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î Raid" or "‚õî ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î Raid",
            Content = "‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô",
            Duration = 3
        })
    end
})

-- Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mermalair
Tabs.Macro:AddDropdown("RaidMermalairDropdown", {
    Title = "üìÇ Mermalair (Raid)",
    Description = "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô Mermalair",
    Values = getMacroFileNames(),
    Default = _G.SelectedRaidMermalairFile,
    Multi = false,
    Callback = function(selected)
        _G.SelectedRaidMermalairFile = selected
        Fluent:Notify({
            Title = "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Mermalair ‡πÅ‡∏•‡πâ‡∏ß",
            Content = "‡∏à‡∏∞‡πÉ‡∏ä‡πâ: " .. selected,
            Duration = 3
        })
    end
})


-- Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Middle Ages
Tabs.Macro:AddDropdown("RaidMiddleAgesDropdown", {
    Title = "üìÇ Middle Ages (Raid)",
    Description = "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô Middle Ages",
    Values = getMacroFileNames(),
    Default = _G.SelectedRaidMiddleAgesFile,
    Multi = false,
    Callback = function(selected)
        _G.SelectedRaidMiddleAgesFile = selected
        Fluent:Notify({
            Title = "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Middle Ages ‡πÅ‡∏•‡πâ‡∏ß",
            Content = "‡∏à‡∏∞‡πÉ‡∏ä‡πâ: " .. selected,
            Duration = 3
        })
    end
})



---------------- CHALLENGE MODE CONFIG --------------------

-- Auto Switch Mode Macro File
Tabs.Macro:AddSection("Challenge Configuration")

-- ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î Challenge Mode
_G.useChallengeMode = _G.useChallengeMode or false

-- ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô
_G.SelectedChallengeBoatingFile = _G.SelectedChallengeBoatingFile or nil
_G.SelectedChallengeDutchmanFile = _G.SelectedChallengeDutchmanFile or nil
_G.SelectedChallengePattyFile = _G.SelectedChallengePattyFile or nil
_G.SelectedChallengeConchFile = _G.SelectedChallengeConchFile or nil

-- üìÅ ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå macro
local function getMacroFileNames()
    local folder = "ZSOFT HUB - SpongeBobTD/Marco/"
    local files = isfolder(folder) and listfiles(folder) or {}
    local names = {}

    for _, file in ipairs(files) do
        local name = string.match(file, "([^\\/]+)%.json$")
        if name then table.insert(names, name) end
    end

    table.sort(names)
    return names
end

-- ‚úÖ Toggle: ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Challenge Mode
Tabs.Macro:AddToggle("UseChallengeMode", {
    Title = "üî• Use Challenge Mode Config",
    Description = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Macro ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Challenge Mode",
    Default = _G.useChallengeMode,
    Callback = function(state)
        _G.useChallengeMode = state
        Fluent:Notify({
            Title = state and "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Challenge Mode" or "‚õî ‡∏õ‡∏¥‡∏î Challenge Mode",
            Content = "‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏ô Challenge Mode",
            Duration = 3
        })
    end
})

-- ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏ô Challenge Mode
local challengeStages = {
    {
        title = "Mrs. Puff's Boating School",
        globalVar = "SelectedChallengeBoatingFile",
        description = "Challenge ‡∏î‡πà‡∏≤‡∏ô Boating School"
    },
    {
        title = "Flying Dutchman Ship",
        globalVar = "SelectedChallengeDutchmanFile",
        description = "Challenge ‡∏î‡πà‡∏≤‡∏ô Dutchman Ship"
    },
    {
        title = "Patty Vault",
        globalVar = "SelectedChallengePattyFile",
        description = "Challenge ‡∏î‡πà‡∏≤‡∏ô Patty Vault"
    },
    {
        title = "Conch Street",
        globalVar = "SelectedChallengeConchFile",
        description = "Challenge ‡∏î‡πà‡∏≤‡∏ô Conch Street"
    },
}

-- ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
for i, stage in ipairs(challengeStages) do
    _G[stage.globalVar] = _G[stage.globalVar] or nil

    Tabs.Macro:AddDropdown("ChallengeDropdown_" .. i, {
        Title = "üìÅ " .. stage.title,
        Description = stage.description,
        Values = getMacroFileNames(),
        Default = _G[stage.globalVar],
        Multi = false,
        Callback = function(selected)
            _G[stage.globalVar] = selected
            Fluent:Notify({
                Title = "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ " .. stage.title,
                Content = "‡∏à‡∏∞‡πÉ‡∏ä‡πâ: " .. selected,
                Duration = 3
            })
        end
    })
end

---------------- END CHALLENGE MODE CONFIG --------------------



-- END  TABS:Macro  -----------------------------------------------------






---  TABS: GAMES -----------------------------------------------------------------------



-- ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Replay
local replayTaskStarted = false -- ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥
Tabs.Game:AddToggle("ReplayToggle", {
    Title = "üîÅ Replay",
    Description = "‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ ‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≠‡∏ö",
    Default = false
}):OnChanged(function(state)
    isReplayEnabled = state
    --print("üîÅ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Replay:", state and "‡πÄ‡∏õ‡∏¥‡∏î" or "‡∏õ‡∏¥‡∏î")

    -- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° task ‡πÄ‡∏ù‡πâ‡∏≤ GUI ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if state and not replayTaskStarted then
        replayTaskStarted = true

        task.spawn(function()
            while true do
                task.wait(1)

                if not isReplayEnabled then break end

                -- ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® roundSummary ‡πÅ‡∏ö‡∏ö‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                local gui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
                local roundSummary = gui and gui:FindFirstChild("RoundSummary")

                if roundSummary and roundSummary.Enabled then
                    --print("üîÅ [Replay] ‡∏û‡∏ö RoundSummary ‡πÄ‡∏õ‡∏¥‡∏î ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Replay")

                    local success, result = pcall(function()
                        return endGameVoteRemote:InvokeServer("Replay")
                    end)

                    if success then
                        --print("‚úÖ [Replay] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Replay ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else
                        warn("‚ùå [Replay] ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                    end

                    task.wait(3)
                end
            end
            replayTaskStarted = false
        end)

    end
end)



-- ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Auto Next (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
local autoNextTaskStarted = false
local isAutoNextEnabled = false

Tabs.Game:AddToggle("AutoNextToggle", {
    Title = "‚è≠Ô∏è Auto Next",
    Description = "‡∏à‡∏∞‡∏Å‡∏î Next ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
    Default = false
}):OnChanged(function(state)
    isAutoNextEnabled = state
    --print("‚è≠Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auto Next:", state and "‡πÄ‡∏õ‡∏¥‡∏î" or "‡∏õ‡∏¥‡∏î")

    if state and not autoNextTaskStarted then
        autoNextTaskStarted = true

        task.spawn(function()
            while true do
                task.wait(1)

                if not isAutoNextEnabled then
                    autoNextTaskStarted = false
                    break
                end

                local gui = Players.LocalPlayer:FindFirstChild("PlayerGui")
                local roundSummary = gui and gui:FindFirstChild("RoundSummary")
                local titleLabel = gui
                    and gui.RoundSummary
                    and gui.RoundSummary:FindFirstChild("Main")
                    and gui.RoundSummary.Main:FindFirstChild("Title")
                    and gui.RoundSummary.Main.Title:FindFirstChild("TitleContainer")
                    and gui.RoundSummary.Main.Title.TitleContainer:FindFirstChild("Title")

                if roundSummary and roundSummary.Enabled and titleLabel then
                    local titleText = titleLabel.Text
                    --print("üì¢ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≠‡∏ö:", titleText)

                    if titleText ~= "DEFEAT!" then
                        --print("‚è≠Ô∏è [AutoNext] ‡∏ä‡∏ô‡∏∞ ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Next")

                        local success, result = pcall(function()
                            return endGameVoteRemote:InvokeServer("Next")
                        end)

                        if success then
                            --print("‚úÖ [Next] ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        else
                            warn("‚ùå [Next] ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                        end

                        task.wait(3)
                    end
                end
            end
        end)
    end
end)



-- ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Auto Lobby
local autoLobbyRunning = false

Tabs.Game:AddToggle("AutoLobbyToggle", {
    Title = "üîÅ Auto Lobby",
    Description = "‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Å‡∏•‡∏±‡∏ö Lobby ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏ñ‡πâ‡∏≤‡∏õ‡∏∏‡πà‡∏° Next / Replay ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Mode Challenge",
    Default = false
}):OnChanged(function(state)
    isAutoLobbyEnabled = state

    if state and not autoLobbyRunning then
        autoLobbyRunning = true

        task.spawn(function()
            while isAutoLobbyEnabled do
                task.wait(1)

                local gui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
                local roundSummary = gui and gui:FindFirstChild("RoundSummary")

                if roundSummary and roundSummary.Enabled then
                    local actionsFolder = roundSummary:FindFirstChild("Main")
                        and roundSummary.Main:FindFirstChild("Content")
                        and roundSummary.Main.Content:FindFirstChild("Actions")

                    local nextBtn = actionsFolder and actionsFolder:FindFirstChild("Next")
                    local replayBtn = actionsFolder and actionsFolder:FindFirstChild("Replay")

                    local nextVisible = nextBtn and nextBtn.Visible
                    local replayVisible = replayBtn and replayBtn.Visible

                    -- ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á ‚Üí ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Å‡∏•‡∏±‡∏ö
                    if nextBtn and replayBtn and not nextVisible and not replayVisible then
                        --print("üèÉ [AutoLobby] ‡∏õ‡∏∏‡πà‡∏° Next / Replay ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á ‚Üí ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Å‡∏•‡∏±‡∏ö Lobby")

                        local success, result = pcall(function()
                            return game:GetService("ReplicatedStorage")
                                :WaitForChild("Packages")
                                :WaitForChild("_Index")
                                :WaitForChild("acecateer_knit@1.7.1")
                                :WaitForChild("knit")
                                :WaitForChild("Services")
                                :WaitForChild("GameService")
                                :WaitForChild("RF")
                                :WaitForChild("ReturningToLobby")
                                :InvokeServer()
                        end)

                        if success then
                            --print("‚úÖ [AutoLobby] ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Å‡∏•‡∏±‡∏ö Lobby ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        else
                            warn("‚ùå [AutoLobby] ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                        end

                        task.wait(3)
                    end
                end
            end

            autoLobbyRunning = false
        end)
    end
end)






Tabs.Game:AddSection("Auto Teleport")
-------------------------------- GAME Check wave ----
-- ‚úÖ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö Wave ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
local targetWave = 1
local waveCheckRunning = false

-- ‚úÖ Input ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç Wave
Tabs.Game:AddInput("TargetWaveInput", {
    Title = "üö™ Teleport Wave",
    Description = "‡∏Å‡∏≥‡∏´‡∏ô‡∏î Wave ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Teleport",
    Default = "1",
    Placeholder = "‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ä‡πà‡∏ô 5",
    Callback = function(val)
        local num = tonumber(val)
        if num and num > 0 then
            targetWave = num
            -- print("üéØ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Wave ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô:", targetWave)
        else
            Fluent:Notify({
                Title = "‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç",
                Content = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç Wave ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                Duration = 3
            })
        end
    end
})



-- ‚úÖ Toggle ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Wave
Tabs.Game:AddToggle("WaveCheckerToggle", {
    Title = "üö™ Auto Teleport To Lobby",
    Description = "‡∏Å‡∏≥‡∏´‡∏ô‡∏î Wave ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Å‡∏•‡∏±‡∏ö Lobby Auto",
    Default = false
}):OnChanged(function(state)
    waveCheckRunning = state

    if state then
        -- ‚úÖ ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠ config ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å SaveManager
        task.wait(1.2)

        Fluent:Notify({
            Title = "üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à Wave",
            Content = "‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á Wave " .. targetWave,
            Duration = 4
        })

        -- ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°...
        task.spawn(function()
            local gui = Players.LocalPlayer:WaitForChild("PlayerGui")
            local waveLabel = gui:WaitForChild("GameUI").Top.Main.StageInfo.Inner.Inner:WaitForChild("CurrentWave")

            local function getWaveNumber()
                local raw = waveLabel.Text or ""
                return tonumber(string.match(raw, "%d+")) or 0
            end

            -- ‚úÖ ‡∏£‡∏≠‡∏à‡∏ô Wave ‡πÄ‡∏£‡∏¥‡πà‡∏° > 0
            while getWaveNumber() <= 0 and waveCheckRunning do
                task.wait(0.5)
            end

            while waveCheckRunning do
                local wave = getWaveNumber()

                if wave >= targetWave then
                    Fluent:Notify({
                        Title = "üì¶ ‡∏ñ‡∏∂‡∏á Wave ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
                        Content = "Wave ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " .. wave .. "\n‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Å‡∏•‡∏±‡∏ö Lobby...",
                        Duration = 5
                    })

                    waveCheckRunning = false

                    local success, result = pcall(function()
                        return game:GetService("ReplicatedStorage")
                            :WaitForChild("Packages")
                            :WaitForChild("_Index")
                            :WaitForChild("acecateer_knit@1.7.1")
                            :WaitForChild("knit")
                            :WaitForChild("Services")
                            :WaitForChild("GameService")
                            :WaitForChild("RF")
                            :WaitForChild("ReturningToLobby")
                            :InvokeServer()
                    end)

                    if success then
                        --print("‚úÖ ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Å‡∏•‡∏±‡∏ö Lobby ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else
                        warn("‚ùå ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                    end

                    break
                end

                task.wait(0.6)
            end
        end)

    else
        Fluent:Notify({
            Title = "‚õî ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à Wave",
            Content = "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
            Duration = 3
        })
    end
end)

-------------------------------- End GAME Check wave ----




---  END TABS: GAMES -----------------------------------------------------------------------







---  TABS: Misc -----------------------------------------------------------------------

-- Auto Claim Playtime
local autoClaimPlaytimeRunning = false
Tabs.Misc:AddToggle("AutoClaimPlaytimeToggle", {
    Title = "üéÅ Auto Claim Prizes Playtime",
    Description = "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ Prizes Playtime",
    Default = false
}):OnChanged(function(state)
    autoClaimPlaytimeRunning = state

    if isBooting then return end

    Fluent:Notify({
        Title = "üéÅ Auto Claim Playtime",
        Content = state and "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Playtime 1-15..." or "‚õî ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
        Duration = 3
    })

    if state then
        task.spawn(function()
            local remote = game:GetService("ReplicatedStorage")
                :WaitForChild("Packages")
                :WaitForChild("_Index")
                :WaitForChild("acecateer_knit@1.7.1")
                :WaitForChild("knit")
                :WaitForChild("Services")
                :WaitForChild("PlaytimePrizeService")
                :WaitForChild("RF")
                :WaitForChild("ClaimPrize")

            while autoClaimPlaytimeRunning do
                for i = 1, 15 do
                    if not autoClaimPlaytimeRunning then break end -- ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏≤‡∏Å‡∏õ‡∏¥‡∏î Toggle

                    local args = {i}

                    local ok, result = pcall(function()
                        return remote:InvokeServer(unpack(args))
                    end)

                    if ok then
                        --print("‚úÖ ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Playtime Index " .. i .. " ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else
                        warn("‚ùå ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Index " .. i .. " ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                    end

                    task.wait(1) -- ‚è≥ ‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ index ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô spam
                end

                task.wait(10) -- üîÅ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
            end
        end)
    end
end)



-- Auto Claim Daily Reward
local autoClaimDailyRunning = false
Tabs.Misc:AddToggle("AutoClaimDailyRewardToggle", {
    Title = "üìÖ Auto Claim Daily Reward",
    Description = "‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
    Default = false
}):OnChanged(function(state)
    autoClaimDailyRunning = state

    if isBooting then return end

    Fluent:Notify({
        Title = "üìÖ Daily Reward",
        Content = state and "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Daily 1-7..." or "‚õî ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö Daily Reward",
        Duration = 3
    })

    if state then
        task.spawn(function()
            local remote = game:GetService("ReplicatedStorage")
                :WaitForChild("Packages")
                :WaitForChild("_Index")
                :WaitForChild("acecateer_knit@1.7.1")
                :WaitForChild("knit")
                :WaitForChild("Services")
                :WaitForChild("PlaytimeService")
                :WaitForChild("RF")
                :WaitForChild("ClaimDailyReward")

            local Players = game:GetService("Players")
            local localPlayer = Players.LocalPlayer

            while autoClaimDailyRunning do
                for i = 1, 7 do
                    if not autoClaimDailyRunning then break end

                    local args = {i}
                    local ok, result = pcall(function()
                        return remote:InvokeServer(unpack(args))
                    end)

                    if ok then
                        --print("‚úÖ ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Daily Index " .. i)
                    else
                        warn("‚ùå ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Daily Index " .. i .. " ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                    end

                    task.wait(1)
                end

                -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à HUD.Enabled
                local gui = localPlayer:WaitForChild("PlayerGui")
                local hud = gui:FindFirstChild("HUD")

                if hud and hud:IsA("ScreenGui") and not hud.Enabled then
                    hud.Enabled = true
                    --print("‚úÖ HUD ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")
                end

                task.wait(10)
            end
        end)
    end
end)


-- Auto Claim Battle Pass
local autoClaimBattlePassRunning = false

Tabs.Misc:AddToggle("AutoClaimBattlePassToggle", {
    Title = "üéüÔ∏è Auto Claim Battle Pass",
    Description = "‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Battle Pass Free ‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (ClaimAll)",
    Default = false
}):OnChanged(function(state)
    autoClaimBattlePassRunning = state

    if isBooting then return end

    Fluent:Notify({
        Title = "üéüÔ∏è Battle Pass",
        Content = state and "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Auto Claim All" or "‚õî ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö Battle Pass",
        Duration = 3
    })

    if state then
        task.spawn(function()
            local remote = game:GetService("ReplicatedStorage")
                :WaitForChild("Packages")
                :WaitForChild("_Index")
                :WaitForChild("acecateer_knit@1.7.1")
                :WaitForChild("knit")
                :WaitForChild("Services")
                :WaitForChild("SeasonPassService")
                :WaitForChild("RF")
                :WaitForChild("ClaimAll")

            while autoClaimBattlePassRunning do
                local ok, result = pcall(function()
                    return remote:InvokeServer()
                end)

                if ok then
                    --print("‚úÖ ClaimAll Battle Pass ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else
                    warn("‚ùå ClaimAll ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                end

                task.wait(15) -- üîÅ ‡∏£‡∏≠ 15 ‡∏ß‡∏¥ ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà
            end
        end)
    end
end)




---  END TABS: Misc -----------------------------------------------------------------------







---   TABS: ITEM -----------------------------------------------------------------------



-- ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥  Treasure Chest
local chestToOpen = "TreasureChest"
local autoOpenChest = false
local VirtualInputManager = game:GetService("VirtualInputManager")
local camera = workspace.CurrentCamera

-- ‚úÖ Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î
Tabs.Item:AddDropdown("SelectTreasureChest", {
    Title = "üì¶ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î",
    Description = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
    Values = { "TreasureChest", "EpicTreasureChest", "LegendaryTreasureChest" },
    Default = "TreasureChest",
    Multi = false
}):OnChanged(function(value)
    chestToOpen = value
    Fluent:Notify({
        Title = "Treasure Chest",
        Content = "üì¶ ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á: " .. value,
        Duration = 3
    })
end)


Tabs.Item:AddToggle("AutoOpenTreasureChestToggle", {
    Title = "üì¶ ‡πÄ‡∏õ‡∏¥‡∏î Treasure Chest Auto",
    Description = "‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Auto ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≤‡∏° Cutscene",
    Default = false,
    Callback = function(state)
        autoOpenChest = state

        Fluent:Notify({
            Title = "Treasure Chest",
            Content = state and ("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á " .. chestToOpen .. " ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥") or "‚õî ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á",
            Duration = 3
        })

        if state then
            task.spawn(function()
                local remote = game:GetService("ReplicatedStorage")
                    :WaitForChild("Packages")
                    :WaitForChild("_Index")
                    :WaitForChild("acecateer_knit@1.7.1")
                    :WaitForChild("knit")
                    :WaitForChild("Services")
                    :WaitForChild("TreasureService")
                    :WaitForChild("RF")
                    :WaitForChild("Open")

                while autoOpenChest do
                    local ok, result = pcall(function()
                        return remote:InvokeServer(chestToOpen)
                    end)

                    if ok then
                        Fluent:Notify({
                            Title = "Treasure Chest",
                            Content = "üéâ ‡πÄ‡∏õ‡∏¥‡∏î " .. chestToOpen .. " ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                            Duration = 3
                        })
                    else
                        warn("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                    end

                    task.wait(1.5)
                end
            end)
        end
    end
})




-----------------------------  AUTO BUY ------------------------------
Tabs.Item:AddSection("Auto Buy")

local autoBuyRunning = false
local itemToBuy = "XP"
local amountToBuy = 1 -- ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á key ‡∏à‡∏≤‡∏Å table
local function getTableKeys(tbl)
    local result = {}
    for key, _ in pairs(tbl) do
        table.insert(result, key)
    end
    return result
end

--  Map ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‚Üí ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
local itemMap = {
    ["XP 2x"] = "XP",
    ["GEMS"] = "GEMS",
}

--  Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°
local dropdownValues = getTableKeys(itemMap)

Tabs.Item:AddDropdown("MerchantItemDropdown", {
    Title = "üõí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠",
    Description = "‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤ Lobby",
    Values = dropdownValues,
    Default = 1,
    Multi = false
}):OnChanged(function(val)
    itemToBuy = itemMap[val]
    Fluent:Notify({
        Title = "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        Content = "‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠: " .. val,
        Duration = 3
    })
end)

--  Input ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
Tabs.Item:AddInput("AmountToBuyInput", {
    Title = "üõí ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠",
    Default = "1",
    Placeholder = "‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
    Numeric = true,
    Callback = function(val)
        local number = tonumber(val)
        if number and number > 0 then
            amountToBuy = math.floor(number)
            Fluent:Notify({
                Title = "üõí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
                Content = "‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: " .. amountToBuy,
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                Content = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0",
                Duration = 3
            })
        end
    end
})


Tabs.Item:AddToggle("AutoBuyMerchantToggle", {
    Title = "üõí Auto Buy : Merchant",
    Description = "‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ Lobby",
    Default = false
}):OnChanged(function(state)
    autoBuyRunning = state

    if state then
         Fluent:Notify({
            Title = "üõí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Auto Buy",
            Content = "‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠: " .. itemToBuy .. " ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " .. amountToBuy .. " ‡∏ä‡∏¥‡πâ‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ Lobby",
            Duration = 4
        })

        task.spawn(function()
            local Players = game:GetService("Players")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Workspace = game:GetService("Workspace")
            local localPlayer = Players.LocalPlayer

            while autoBuyRunning do
                if Workspace:FindFirstChild("LobbyMenuZones") then
                    local gui = localPlayer:WaitForChild("PlayerGui")
                    local coinsLabel = gui.HUD.Bottom.Currency.Coins:FindFirstChild("Title")
                    local merchant = gui:FindFirstChild("Merchant")

                    -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Merchant ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                    if merchant and merchant:FindFirstChild("Main") then
                        local shopWindow = merchant.Main:FindFirstChild("ShopWindow")
                        if shopWindow and shopWindow:FindFirstChild("Content") then
                            local bin = shopWindow.Content:FindFirstChild("Bin")
                            if bin then
                                for _, item in pairs(bin:GetChildren()) do
                                    if item:IsA("Frame") and item:FindFirstChild("Main") then
                                        local titleLabel = item.Main:FindFirstChild("Title")
                                        if titleLabel and titleLabel:IsA("TextLabel") then
                                            if string.find(string.lower(titleLabel.Text), string.lower(itemToBuy)) then
                                                local layoutOrder = item.LayoutOrder or 0

                                                -- ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ï‡∏±‡∏ß
                                                local coinText = coinsLabel and coinsLabel.Text or "0"
                                                local coinClean = coinText:gsub(",", ""):gsub("%.", "")
                                                local coinAmount = tonumber(coinClean) or 0

                                                -- ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                                                local amountLabel = item.Main.Buy.Amount:FindFirstChild("Amount")
                                                local priceText = amountLabel and amountLabel.Text or "0"
                                                local priceClean = priceText:gsub(",", ""):gsub("%.", "")
                                                local itemPrice = tonumber(priceClean) or 0



                                                local totalCost = itemPrice * amountToBuy

                                                if totalCost <= coinAmount then
                                                    -- ‚úÖ ‡∏¢‡∏¥‡∏á Remote ‡∏ã‡∏∑‡πâ‡∏≠
                                                    local purchaseRemote = ReplicatedStorage
                                                        :WaitForChild("Packages")
                                                        :WaitForChild("_Index")
                                                        :WaitForChild("acecateer_knit@1.7.1")
                                                        :WaitForChild("knit")
                                                        :WaitForChild("Services")
                                                        :WaitForChild("MerchantService")
                                                        :WaitForChild("RF")
                                                        :WaitForChild("Purchase")

                                                    local ok, resultBuy = pcall(function()
                                                        return purchaseRemote:InvokeServer(layoutOrder, amountToBuy)
                                                    end)

                                                    if ok then
                                                        Fluent:Notify({
                                                            Title = "‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                                                            Content = string.format("‡∏ã‡∏∑‡πâ‡∏≠ %s ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô %d ‡∏ä‡∏¥‡πâ‡∏ô", titleLabel.Text, amountToBuy),
                                                            Duration = 4
                                                        })
                                                    else
                                                        warn("‚ùå ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", resultBuy)
                                                    end
                                                else
                                                    -- ‚úÖ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á Remote
                                                    --print("üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ " .. totalCost .. ", ‡∏°‡∏µ " .. coinAmount)
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end

                task.wait(1) -- ‚úÖ ‡∏£‡∏≠‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥ ‡∏•‡∏î‡πÇ‡∏´‡∏•‡∏î CPU
            end
        end)
    else
        Fluent:Notify({
            Title = "‚õî ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Auto Buy",
            Content = "‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ",
            Duration = 3
        })
    end
end)
----------------------------- END AUTO BUY ------------------------------




Tabs.Item:AddSection("Auto Boots Item")

-- üì¶ ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô: ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°
local itemUseAmount = {
    ["XP_60"] = 1,
    ["GEMS_60"] = 1,
}

-- üßæ ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
local useInputRef
useInputRef = Tabs.Item:AddInput("GeneralUseAmount", {
    Title = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ",
    Description = "‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    Default = "1",
    Placeholder = "‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0",
    Numeric = true,
    Callback = function(value)
        local num = tonumber(value)
        if not num or num < 1 then
            -- fallback ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ toggle ‡πÑ‡∏´‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            for k in pairs(itemUseAmount) do itemUseAmount[k] = 1 end
            task.defer(function() useInputRef:SetValue("1") end)
        else
            for k in pairs(itemUseAmount) do
                itemUseAmount[k] = math.floor(num)
            end
        end
    end
})


-- ‚úÖ AUTO USE XP BOOST
local autoUseXP = false

Tabs.Item:AddToggle("AutoUseXPBoost", {
    Title = "‚¨ÜÔ∏è ‡πÉ‡∏ä‡πâ XP X2 (Auto)",
    Description = "‡πÉ‡∏ä‡πâ XP x2 Boost ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ Buff ‡∏´‡∏°‡∏î",
    Default = false,
    Callback = function(state)
        autoUseXP = state

        Fluent:Notify({
            Title = "XP Boost",
            Content = state and "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à XP X2..." or "‚õî ‡∏´‡∏¢‡∏∏‡∏î XP X2",
            Duration = 3
        })

        if state then
            task.spawn(function()
                local boostName = "XP_60"
                local player = game:GetService("Players").LocalPlayer
                local gui = player:WaitForChild("PlayerGui")

                local boostsFolder = gui:WaitForChild("Boosts"):WaitForChild("Main")
                local inventoryFolder = gui:WaitForChild("Items")
                    :WaitForChild("Main")
                    :WaitForChild("Content")
                    :WaitForChild("Bin")

                local remote = game:GetService("ReplicatedStorage")
                    :WaitForChild("Packages")
                    :WaitForChild("_Index")
                    :WaitForChild("acecateer_knit@1.7.1")
                    :WaitForChild("knit")
                    :WaitForChild("Services")
                    :WaitForChild("BoostsService")
                    :WaitForChild("RF")
                    :WaitForChild("UseBoost")

                local isFirstTry = true -- ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏°‡∏≠

                while autoUseXP do
                    local hasItem = inventoryFolder:FindFirstChild(boostName)
                    local isBuffActive = boostsFolder:FindFirstChild(boostName)

                    -- ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏¢‡∏¥‡∏á Boost ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
                    if isFirstTry or (hasItem and not isBuffActive) then
                        local useAmount = itemUseAmount[boostName] or 1

                        local ok, result = pcall(function()
                            return remote:InvokeServer(boostName, useAmount)
                        end)

                        if ok then
                            Fluent:Notify({
                                Title = "XP Boost",
                                Content = string.format("üéâ ‡πÉ‡∏ä‡πâ %s ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô %d ‡∏ä‡∏¥‡πâ‡∏ô", boostName, useAmount),
                                Duration = 4
                            })
                        else
                            warn("‚ùå ‡πÉ‡∏ä‡πâ Boost ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                        end
                    end

                    isFirstTry = false -- ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö
                    task.wait(5)
                end

            end)
        end
    end
})


-- ‚úÖ AUTO USE GEMS BOOST
-- ‚úÖ AUTO USE GEMS BOOST (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô XP Boost)
local autoUseGems = false

Tabs.Item:AddToggle("AutoUseGemsBoost", {
    Title = "üíé ‡πÉ‡∏ä‡πâ GEMS X2 (Auto)",
    Description = "‡πÉ‡∏ä‡πâ GEMS x2 Boost ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ Buff ‡∏´‡∏°‡∏î",
    Default = false,
    Callback = function(state)
        autoUseGems = state

        Fluent:Notify({
            Title = "GEMS Boost",
            Content = state and "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à GEMS X2..." or "‚õî ‡∏´‡∏¢‡∏∏‡∏î GEMS X2",
            Duration = 3
        })

        if state then
            task.spawn(function()
                local boostName = "GEMS_60"
                local player = game:GetService("Players").LocalPlayer
                local gui = player:WaitForChild("PlayerGui")

                local boostsFolder = gui:WaitForChild("Boosts"):WaitForChild("Main")
                local inventoryFolder = gui:WaitForChild("Items")
                    :WaitForChild("Main")
                    :WaitForChild("Content")
                    :WaitForChild("Bin")

                local remote = game:GetService("ReplicatedStorage")
                    :WaitForChild("Packages")
                    :WaitForChild("_Index")
                    :WaitForChild("acecateer_knit@1.7.1")
                    :WaitForChild("knit")
                    :WaitForChild("Services")
                    :WaitForChild("BoostsService")
                    :WaitForChild("RF")
                    :WaitForChild("UseBoost")

                local isFirstTry = true

                while autoUseGems do
                    local hasItem = inventoryFolder:FindFirstChild(boostName)
                    local isBuffActive = boostsFolder:FindFirstChild(boostName)

                    if isFirstTry or (hasItem and not isBuffActive) then
                        local useAmount = itemUseAmount and itemUseAmount[boostName] or 1

                        local ok, result = pcall(function()
                            return remote:InvokeServer(boostName, useAmount)
                        end)

                        if ok then
                            Fluent:Notify({
                                Title = "GEMS Boost",
                                Content = string.format("üéâ ‡πÉ‡∏ä‡πâ %s ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô %d ‡∏ä‡∏¥‡πâ‡∏ô", boostName, useAmount),
                                Duration = 4
                            })
                        else
                            warn("‚ùå ‡πÉ‡∏ä‡πâ GEMS Boost ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", result)
                        end
                    end

                    isFirstTry = false
                    task.wait(5)
                end
            end)
        end
    end
})




---  END TABS: ITEM -----------------------------------------------------------------------




---- ZSOFT ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏ç‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£ --------------------------------
local player = game:GetService("Players").LocalPlayer
local UIS = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- ‚úÖ GUI ‡∏´‡∏•‡∏±‡∏Å
local ScreenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
ScreenGui.Name = "ZSOFT_ButtonUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global

-- ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å
local button = Instance.new("ImageButton")
button.Name = "ZSOFTButton"
button.Size = UDim2.new(0, 70, 0, 70)
button.Position = UDim2.new(0.5, -50, 0, 20) -- ‡∏Å‡∏•‡∏≤‡∏á‡∏ö‡∏ô
button.AnchorPoint = Vector2.new(0.5, 0)
button.BackgroundTransparency = 1
button.Image = "rbxassetid://114200164161641" -- ‚úÖ ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏´‡∏ç‡πà
button.Parent = ScreenGui

-- ‚úÖ Label ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
local label = Instance.new("TextLabel", button)
label.Name = "Label"
label.Size = UDim2.new(1, 0, 0, 25)
label.Position = UDim2.new(0, 0, 1, 0) -- ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
label.BackgroundTransparency = 1
label.Text = "ZSOFT"
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.TextStrokeTransparency = 0
label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
label.Font = Enum.Font.GothamBold
label.TextScaled = true
label.ZIndex = 2

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
button.MouseButton1Click:Connect(function()
    -- ‡∏ß‡∏¥‡∏ò‡∏µ 1: ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Toggles.OpenUI ‡∏à‡∏≤‡∏Å Fluent
    if Toggles and Toggles.OpenUI then
        Toggles.OpenUI:SetValue(not Toggles.OpenUI.Value)

    -- ‡∏ß‡∏¥‡∏ò‡∏µ 2: ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ _G.ToggleMainUI
    elseif _G.ToggleMainUI then
        _G.ToggleMainUI()

    -- ‡∏ß‡∏¥‡∏ò‡∏µ 3: ‡∏™‡∏≥‡∏£‡∏≠‡∏á ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° LeftControl
    else
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.LeftControl, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.LeftControl, false, game)
    end
end)

-- ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
local dragging, dragStart, startPos
button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = button.Position
    end
end)

UIS.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        button.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
end)

UIS.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)
---- END --------------------------------









---  END TABS: SETTINGS -----------------------------------------------------------------------

Tabs.Settings:AddParagraph({
    Title = "Settings",
    Content = "‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Config, Theme ‡∏Ø‡∏•‡∏Ø"
})
---  END TABS: SETTINGS -----------------------------------------------------------------------


-- ‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Fluent Library ‡πÉ‡∏´‡πâ SaveManager/InterfaceManager
local successCfg = pcall(function()
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    SaveManager:IgnoreThemeSettings()
    SaveManager:SetFolder("ZSOFT HUB - SpongeBobTD")
    InterfaceManager:SetFolder("ZSOFT HUB - SpongeBobTD")

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)

    -- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î config ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
    SaveManager:LoadAutoloadConfig()

end)




-- ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö Macro ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
Window:SelectTab(2)

-- ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
Fluent:Notify({
    Title = "ZSOFT HUB",
    Content = "ZSOFT HUB - SpongeBobTD Ready",
    Duration = 5
})



---- AUTO SAVE / AUTO LOAD CONFIG --------------------------------
local playerName = game.Players.LocalPlayer.Name
local folder = "ZSOFT HUB - SpongeBobTD"
local autoloadPath = folder .. "/settings/autoload.txt"

-- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
SaveManager:SetFolder(folder)
InterfaceManager:SetFolder(folder)
SaveManager.ConfigName = playerName

-- ‚úÖ ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ UI
if SaveManager.Options and SaveManager.Options.ConfigName and SaveManager.Options.ConfigName.Textbox then
    SaveManager.Options.ConfigName.Textbox.Text = playerName
end

-- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ autoload.txt ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
local shouldLoad = false
local ok, autoloadName = pcall(readfile, autoloadPath)
if ok and autoloadName == playerName then
    shouldLoad = true
end

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ pcall ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô error
if shouldLoad then
    local success, err = pcall(function()
        SaveManager:Load(playerName)
    end)
    if success then
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        print("‚úÖ Autoload matched:", autoloadName)
    else
        warn("‚ö†Ô∏è Load error (autoload matched):", err)
    end
else
    -- ‚ùå ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô autoload ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î config ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    pcall(function()
        writefile(autoloadPath, playerName)
        print("‚ö†Ô∏è Autoload mismatch ‚Üí overwrite:", autoloadName, "‚Üí", playerName)
    end)

    local success, err = pcall(function()
        SaveManager:Load(playerName)
    end)
    if success then
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        print("‚úÖ Loaded default config for:", playerName)
    else
        warn("‚ö†Ô∏è Load error (new user):", err)
    end
end

-- ‚úÖ ‡∏ú‡∏π‡∏Å AutoSave ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å flag ‡πÉ‡∏ô Fluent
for flagName, flagData in pairs(Fluent.Flags or {}) do
    if typeof(flagData) == "table" and typeof(flagData.Changed) == "function" then
        flagData.Changed:Connect(function()
            SaveManager:Save(playerName)
            --print("üíæ AutoSaved from:", flagName)
        end)
    end
end

-- ‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥
task.spawn(function()
    while true do
        task.wait(5)
        SaveManager:Save(playerName)
        --print("üïí AutoSaved every 30s for", playerName)
    end
end)
---- END AUTO SAVE / AUTO LOAD CONFIG --------------------------------



    ------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ Toggle : on ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô -------------
    local hasTriggeredPlayToggle = false

    local function triggerToggleCallbacks()
        task.delay(1, function()
            if not Toggles then return end

            for id, toggle in pairs(Toggles) do
                if typeof(toggle) == "table" and toggle.Value == true then
                    if id == "PlayToggle" and hasTriggeredPlayToggle then
                        print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å PlayToggle ‡∏ã‡πâ‡∏≥")
                    else
                        toggle:SetValue(true)
                        if id == "PlayToggle" then
                            hasTriggeredPlayToggle = true
                        end
                    end
                end
            end
        end)
    end
    triggerToggleCallbacks()

    ------------- END ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ Toggle : on ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô -------------

